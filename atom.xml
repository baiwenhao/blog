<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>wenhao blog</title>
  
  <subtitle>时刻记录</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://baiwenhao.github.io/"/>
  <updated>2020-10-21T06:38:57.564Z</updated>
  <id>http://baiwenhao.github.io/</id>
  
  <author>
    <name>wenhao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>centos</title>
    <link href="http://baiwenhao.github.io/posts/cd183338/"/>
    <id>http://baiwenhao.github.io/posts/cd183338/</id>
    <published>2020-03-29T06:17:30.000Z</published>
    <updated>2020-10-21T06:38:57.564Z</updated>
    
    <content type="html"><![CDATA[<h2 id="start"><a href="#start" class="headerlink" title="start"></a>start</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">yum -y install wget <span class="comment">// 纯粹的命令行工具</span></span><br><span class="line">yum install -y zip unzip <span class="comment">// centos 不支持 apt-get</span></span><br></pre></td></tr></table></figure><h2 id="install-V2ray"><a href="#install-V2ray" class="headerlink" title="install V2ray"></a>install V2ray</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget https://install.direct/go.sh // 下载脚本</span><br><span class="line">bash go.sh // 执行</span><br><span class="line">systemctl status v2ray</span><br><span class="line">systemctl start v2ray</span><br><span class="line">systemctl stop v2ray</span><br><span class="line">systemctl restart v2ray</span><br><span class="line">systemctl enable v2ray</span><br><span class="line"></span><br><span class="line">cat /etc/v2ray/config.json</span><br><span class="line">&#123;</span><br><span class="line">  &quot;inbounds&quot;: [&#123;</span><br><span class="line">    &quot;port&quot;: 36710, // 自定义端口号</span><br><span class="line">    &quot;protocol&quot;: &quot;vmess&quot;,</span><br><span class="line">    &quot;settings&quot;: &#123;</span><br><span class="line">      &quot;clients&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;id&quot;: &quot;472b34f4-e918-4e1c-9caf-842c50a6dfef&quot;,</span><br><span class="line">          &quot;level&quot;: 1,</span><br><span class="line">          &quot;alterId&quot;: 2</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;],</span><br><span class="line">  &quot;outbounds&quot;: [&#123;</span><br><span class="line">    &quot;protocol&quot;: &quot;freedom&quot;,</span><br><span class="line">    &quot;settings&quot;: &#123;&#125;</span><br><span class="line">  &#125;,&#123;</span><br><span class="line">    &quot;protocol&quot;: &quot;blackhole&quot;,</span><br><span class="line">    &quot;settings&quot;: &#123;&#125;,</span><br><span class="line">    &quot;tag&quot;: &quot;blocked&quot;</span><br><span class="line">  &#125;],</span><br><span class="line">  &quot;routing&quot;: &#123;</span><br><span class="line">    &quot;rules&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;type&quot;: &quot;field&quot;,</span><br><span class="line">        &quot;ip&quot;: [&quot;geoip:private&quot;],</span><br><span class="line">        &quot;outboundTag&quot;: &quot;blocked&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更新 V2Ray 的方法是再次执行安装脚本</p><h2 id="install-shadowsockes"><a href="#install-shadowsockes" class="headerlink" title="install shadowsockes"></a>install shadowsockes</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py // 安装 pip 管理工具</span><br><span class="line">python get-pip.py</span><br><span class="line">pip install shadowsocks // 安装 shadowsocks</span><br><span class="line"></span><br><span class="line">vi /etc/shadowsocks.json // 配置文件</span><br><span class="line">&#123;</span><br><span class="line">  &quot;server&quot;: &quot;0.0.0.0&quot;,</span><br><span class="line">  &quot;server_port&quot;: 36800,</span><br><span class="line">  &quot;local_port&quot;: 1080,</span><br><span class="line">  &quot;password&quot;: &quot;wenhao.works&quot;,</span><br><span class="line">  &quot;timeout&quot;: 300,</span><br><span class="line">  &quot;method&quot;: &quot;aes-256-cfb&quot;</span><br><span class="line">&#125;</span><br><span class="line">systemctl enable shadowsocks // 开机自启命令</span><br><span class="line">systemctl start shadowsocks // 启动命令</span><br><span class="line">systemctl status shadowsocks // 查看状态命令</span><br><span class="line">systemctl stop shadowsocks // 关闭服务</span><br><span class="line">pip uninstall shadowsocks // 卸载</span><br></pre></td></tr></table></figure><h2 id="install-git"><a href="#install-git" class="headerlink" title="install git"></a>install git</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">yum install git</span><br></pre></td></tr></table></figure><h2 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">nginx status</span><br><span class="line">nginx -t           #测试配置文件</span><br><span class="line">nginx -s stop      #强制停止Nginx服务</span><br><span class="line">nginx -s quit      #处理完请求后再停止服务</span><br><span class="line">nginx -s reload    #重启命令</span><br><span class="line">ps -ef |grep nginx #查看进程命令</span><br><span class="line">nginx -v           #查看Nginx的版本号</span><br></pre></td></tr></table></figure><h2 id="查看开放的端口"><a href="#查看开放的端口" class="headerlink" title="查看开放的端口"></a>查看开放的端口</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --list-ports</span><br></pre></td></tr></table></figure><h2 id="添加开放的端口"><a href="#添加开放的端口" class="headerlink" title="添加开放的端口"></a>添加开放的端口</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=80/tcp --permanent</span><br></pre></td></tr></table></figure><p>switchyOmega</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;start&quot;&gt;&lt;a href=&quot;#start&quot; class=&quot;headerlink&quot; title=&quot;start&quot;&gt;&lt;/a&gt;start&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>chrome</title>
    <link href="http://baiwenhao.github.io/posts/f9d684ec/"/>
    <id>http://baiwenhao.github.io/posts/f9d684ec/</id>
    <published>2019-10-14T02:56:31.000Z</published>
    <updated>2020-10-21T06:38:57.564Z</updated>
    
    <content type="html"><![CDATA[<h3 id="one"><a href="#one" class="headerlink" title="one"></a>one</h3><p>1.</p><h3 id="确保文件送达到浏览器"><a href="#确保文件送达到浏览器" class="headerlink" title="确保文件送达到浏览器"></a>确保文件送达到浏览器</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;one&quot;&gt;&lt;a href=&quot;#one&quot; class=&quot;headerlink&quot; title=&quot;one&quot;&gt;&lt;/a&gt;one&lt;/h3&gt;&lt;p&gt;1.&lt;/p&gt;
&lt;h3 id=&quot;确保文件送达到浏览器&quot;&gt;&lt;a href=&quot;#确保文件送达到浏览器&quot; class=&quot;headerlink
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>weex</title>
    <link href="http://baiwenhao.github.io/posts/dfe4281e/"/>
    <id>http://baiwenhao.github.io/posts/dfe4281e/</id>
    <published>2019-02-22T10:10:40.000Z</published>
    <updated>2020-10-21T06:38:57.591Z</updated>
    
    <content type="html"><![CDATA[<h2 id="全局安装-weex"><a href="#全局安装-weex" class="headerlink" title="全局安装 weex"></a>全局安装 weex</h2><p>npm install weex-toolkit -g</p><p><a href="https://weex.apache.org/cn/guide/" target="_blank" rel="noopener">https://weex.apache.org/cn/guide/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;全局安装-weex&quot;&gt;&lt;a href=&quot;#全局安装-weex&quot; class=&quot;headerlink&quot; title=&quot;全局安装 weex&quot;&gt;&lt;/a&gt;全局安装 weex&lt;/h2&gt;&lt;p&gt;npm install weex-toolkit -g&lt;/p&gt;
&lt;p&gt;&lt;a href
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>canvas</title>
    <link href="http://baiwenhao.github.io/posts/a59f6c18/"/>
    <id>http://baiwenhao.github.io/posts/a59f6c18/</id>
    <published>2018-06-25T01:49:44.000Z</published>
    <updated>2020-10-21T06:38:57.564Z</updated>
    
    <content type="html"><![CDATA[<h2 id="canvas"><a href="#canvas" class="headerlink" title="canvas"></a>canvas</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ctx.fillStyle = <span class="string">'#f00'</span></span><br><span class="line">ctx.strokeStyle</span><br><span class="line">ctx.lineWidth</span><br><span class="line"></span><br><span class="line">ctx.fill()</span><br><span class="line">ctx.stroke()</span><br><span class="line"></span><br><span class="line">ctx.lineJoin = <span class="string">'round'</span></span><br><span class="line">ctx.lineWidth = <span class="number">20</span></span><br><span class="line">ctx.fillRect(<span class="number">50</span>, <span class="number">50</span>, <span class="number">150</span>, <span class="number">100</span>)</span><br><span class="line">ctx.strokeRect(<span class="number">50</span>, <span class="number">50</span>, <span class="number">150</span>, <span class="number">100</span>)</span><br></pre></td></tr></table></figure><h2 id="toDataURL"><a href="#toDataURL" class="headerlink" title="toDataURL"></a>toDataURL</h2><p>导出图片的时候经常报画布被污染，用node做个中间层，保证在同一个域名，<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> request = <span class="built_in">require</span>(<span class="string">'request'</span>)</span><br><span class="line"><span class="keyword">const</span> resolve = <span class="function">(<span class="params">dir</span>) =&gt;</span> path.join(__dirname, <span class="string">'..'</span>, dir)</span><br><span class="line"><span class="keyword">const</span> cors = <span class="built_in">require</span>(<span class="string">'cors'</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/getFaceImg'</span>, cors(), (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> _url = req.query.url</span><br><span class="line">  <span class="comment">// const _url = 'http://image.51biaoqing.com/templet/preview/2b7d926d9d7c42dda19db51b9a3bbcdc.png'</span></span><br><span class="line">  <span class="keyword">const</span> arr = _url.split(<span class="string">'/'</span>)</span><br><span class="line">  <span class="keyword">const</span> name = arr[arr.length - <span class="number">1</span>]</span><br><span class="line">  <span class="keyword">const</span> abs = resolve(<span class="string">'../dist/'</span> + name)</span><br><span class="line">  request(_url).pipe(fs.createWriteStream(abs))</span><br><span class="line">  res.json(&#123; <span class="attr">url</span>: <span class="string">'dist/'</span> + name &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 图片来自网络</span></span><br><span class="line">img.setAttribute(<span class="string">'crossOrigin'</span>, <span class="string">'Anonymous'</span>)</span><br></pre></td></tr></table></figure></p><h2 id="base64"><a href="#base64" class="headerlink" title="base64"></a>base64</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> img2base64 = <span class="function">(<span class="params">url, crossOrigin</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> img = <span class="keyword">new</span> Image()</span><br><span class="line"></span><br><span class="line">    img.onload = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> c = <span class="built_in">document</span>.createElement(<span class="string">'canvas'</span>)</span><br><span class="line"></span><br><span class="line">      c.width = img.naturalWidth</span><br><span class="line">      c.height = img.naturalHeight</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> cxt = c.getContext(<span class="string">'2d'</span>)</span><br><span class="line"></span><br><span class="line">      cxt.drawImage(img, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">      resolve(c.toDataURL(<span class="string">'image/png'</span>))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    crossOrigin &amp;&amp; img.setAttribute(<span class="string">'crossOrigin'</span>, crossOrigin)</span><br><span class="line">    img.src = url</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="透明canvas-背景变黑"><a href="#透明canvas-背景变黑" class="headerlink" title="透明canvas 背景变黑"></a>透明canvas 背景变黑</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> renderWhiteCanvas = <span class="function"><span class="keyword">function</span> (<span class="params">ctx</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> imgData = ctx.getImageData(<span class="number">0</span>, <span class="number">0</span>, canvas.width, canvas.height)</span><br><span class="line">  <span class="keyword">const</span> data = imgData.data</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; data.length; i += <span class="number">4</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (data[i + <span class="number">3</span>] &lt; <span class="number">255</span>) &#123;</span><br><span class="line">      data[i] = <span class="number">255</span></span><br><span class="line">      data[i + <span class="number">1</span>] = <span class="number">255</span></span><br><span class="line">      data[i + <span class="number">2</span>] = <span class="number">255</span></span><br><span class="line">      data[i + <span class="number">3</span>] = <span class="number">255</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ctx.putImageData(imgData, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="download-gif"><a href="#download-gif" class="headerlink" title="download gif"></a>download gif</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> download <span class="keyword">from</span> <span class="string">'downloadjs'</span></span><br><span class="line"></span><br><span class="line">downImg () &#123;</span><br><span class="line">  <span class="keyword">const</span> test = <span class="string">'http://testimg.51biaoqing.com'</span></span><br><span class="line">  <span class="keyword">const</span> host = <span class="string">'maketest.51biaoqing.com'</span></span><br><span class="line">  <span class="keyword">let</span> url = <span class="built_in">document</span>.querySelector(<span class="string">'#build_img'</span>).src</span><br><span class="line">  <span class="keyword">if</span> (location.host === host) &#123;</span><br><span class="line">    url = url.replace(<span class="string">'http://image.51biaoqing.com'</span>, test)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> x = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">  x.open(<span class="string">'GET'</span>, url, <span class="literal">true</span>)</span><br><span class="line">  x.responseType = <span class="string">'blob'</span></span><br><span class="line">  x.onload = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    download(e.target.response, (<span class="built_in">Math</span>.random() + <span class="string">''</span>).slice(<span class="number">2</span>) + <span class="string">'.gif'</span>, <span class="string">'image/gif'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  x.send()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Uint8Array-to-base64"><a href="#Uint8Array-to-base64" class="headerlink" title="Uint8Array to base64"></a>Uint8Array to base64</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Uint8ToString = <span class="function">(<span class="params">u8a</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> CHUNK_SZ = <span class="number">0x8000</span></span><br><span class="line">  <span class="keyword">const</span> c = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; u8a.length; i += CHUNK_SZ) &#123;</span><br><span class="line">    c.push(<span class="built_in">String</span>.fromCharCode.apply(<span class="literal">null</span>, u8a.subarray(i, i + CHUNK_SZ)))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> c.join(<span class="string">''</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 赋值src时要手动添加 data:image/gif;base64,</span></span><br><span class="line"><span class="keyword">const</span> base64 = btoa(Uint8ToString(data))</span><br><span class="line"></span><br><span class="line"><span class="comment">// Uint8Array</span></span><br><span class="line"><span class="keyword">const</span> u82 = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(atob(b64encoded).split(<span class="string">''</span>).map(<span class="function">(<span class="params">c</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> c.charCodeAt(<span class="number">0</span>)</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure><p><a href="https://stackoverflow.com/questions/12710001/how-to-convert-uint8-array-to-base64-encoded-string" target="_blank" rel="noopener">https://stackoverflow.com/questions/12710001/how-to-convert-uint8-array-to-base64-encoded-string</a></p><h2 id="blob-to-base64"><a href="#blob-to-base64" class="headerlink" title="blob to base64"></a>blob to base64</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fr = <span class="keyword">new</span> FileReader()</span><br><span class="line">fr.onloadend = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(fr.result)</span><br><span class="line">  <span class="comment">// dataUrl.split(',')[1]</span></span><br><span class="line">&#125;</span><br><span class="line">fr.readAsDataURL(blob)</span><br></pre></td></tr></table></figure><h2 id="阅后即焚"><a href="#阅后即焚" class="headerlink" title="阅后即焚"></a>阅后即焚</h2><p>source-over 默认。在目标图像上显示源图像<br>source-atop 在目标图像顶部显示源图像,源图像位于目标图像之外的部分是不可见的<br>source-in 在目标图像中显示源图像。只有目标图像内的源图像部分会显示，目标图像是透明的,<br>source-out  在目标图像之外显示源图像,只会显示目标图像之外源图像部分，目标图像是透明的,<br>destination-over  在源图像上方显示目标图像,<br>destination-atop  在源图像顶部显示目标图像,源图像之外的目标图像部分不会被显示,<br>destination-in  在源图像中显示目标图像,只有源图像内的目标图像部分会被显示，源图像是透明的,<br>destination-out 在源图像外显示目标图像,只有源图像外的目标图像部分会被显示，源图像是透明的,<br>lighter 显示源图像 + 目标图像。<br>copy  显示源图像。忽略目标图像。<br>xor 使用异或操作对源图像与目标图像进行组合<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ctx.globalCompositeOperation = <span class="string">'source-atop'</span></span><br></pre></td></tr></table></figure></p><p>关于圆角<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ctx.lineJoin = <span class="string">'round'</span></span><br><span class="line">ctx.lineWidth = <span class="number">20</span></span><br><span class="line">ctx.strokeRect(<span class="number">50</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">50</span>) <span class="comment">// 正对 stroke 有效果</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 还是靠path了</span></span><br><span class="line"><span class="comment">// https://blog.csdn.net/sarkuya/article/details/49793531</span></span><br></pre></td></tr></table></figure></p><h2 id="吸色"><a href="#吸色" class="headerlink" title="吸色"></a>吸色</h2><p><a href="https://stackoverflow.com/questions/48249044/how-to-get-the-buffer-data-of-my-image-in-img" target="_blank" rel="noopener">https://stackoverflow.com/questions/48249044/how-to-get-the-buffer-data-of-my-image-in-img</a></p><p><a href="http://ju.outofmemory.cn/entry/332635" target="_blank" rel="noopener">http://ju.outofmemory.cn/entry/332635</a><br><a href="http://www.helloblogs.cn/blogs/?p=93" target="_blank" rel="noopener">http://www.helloblogs.cn/blogs/?p=93</a>  jsgif<br><a href="https://www.tumblr.com/tagged/omg-gif" target="_blank" rel="noopener">https://www.tumblr.com/tagged/omg-gif</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;canvas&quot;&gt;&lt;a href=&quot;#canvas&quot; class=&quot;headerlink&quot; title=&quot;canvas&quot;&gt;&lt;/a&gt;canvas&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>videojs</title>
    <link href="http://baiwenhao.github.io/posts/874da46b/"/>
    <id>http://baiwenhao.github.io/posts/874da46b/</id>
    <published>2018-06-14T03:42:45.000Z</published>
    <updated>2020-10-21T06:38:57.590Z</updated>
    
    <content type="html"><![CDATA[<h2 id="info"><a href="#info" class="headerlink" title="info"></a>info</h2><p>最近在做视频剪切的一个demo，<br>canplaythrough</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;link href=<span class="string">"//vjs.zencdn.net/5.11/video-js.min.css"</span> rel=<span class="string">"stylesheet"</span>&gt;</span><br><span class="line">&lt;script src=<span class="string">"//vjs.zencdn.net/5.11/video.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">'../common/video/style.css'</span></span><br><span class="line"><span class="keyword">const</span> vjs = <span class="built_in">require</span>(<span class="string">'../common/video/index.js'</span>)</span><br></pre></td></tr></table></figure><p>播放按钮默认在左上角，添加类 vjs-big-play-centered 可让按钮垂直居中显示，也可以覆盖样式 video-js .vjs-big-play-button {}</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;video</span><br><span class="line">    id=<span class="string">"my-player"</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span></span>=<span class="string">"video-js"</span></span><br><span class="line">    controls</span><br><span class="line">    preload=<span class="string">"auto"</span></span><br><span class="line">    poster=<span class="string">"//vjs.zencdn.net/v/oceans.png"</span></span><br><span class="line">    data-setup=<span class="string">'&#123;&#125;'</span>&gt;</span><br><span class="line">  &lt;source src=<span class="string">"//vjs.zencdn.net/v/oceans.mp4"</span> type=<span class="string">"video/mp4"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">source</span>&gt;</span></span></span><br><span class="line">  &lt;source src=<span class="string">"//vjs.zencdn.net/v/oceans.webm"</span> type=<span class="string">"video/webm"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">source</span>&gt;</span></span></span><br><span class="line">  &lt;source src=<span class="string">"//vjs.zencdn.net/v/oceans.ogv"</span> type=<span class="string">"video/ogg"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">source</span>&gt;</span></span></span><br><span class="line">  &lt;p <span class="class"><span class="keyword">class</span></span>=<span class="string">"vjs-no-js"</span>&gt;</span><br><span class="line">    To view <span class="keyword">this</span> video please enable JavaScript, and consider upgrading to a</span><br><span class="line">    web browser that</span><br><span class="line">    &lt;a href=<span class="string">"http://videojs.com/html5-video-support/"</span> target=<span class="string">"_blank"</span>&gt;</span><br><span class="line">      supports HTML5 video</span><br><span class="line">    &lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>p&gt;</span><br><span class="line">&lt;<span class="regexp">/video&gt;</span></span><br></pre></td></tr></table></figure><p>不支持 h5 的播放器使用 flash 播放<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">videojs.options.flash.swf = <span class="string">"video-js.swf"</span></span><br></pre></td></tr></table></figure></p><h3 id="api"><a href="#api" class="headerlink" title="api"></a>api</h3><p>api太多了，只列出一些常用方法</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">autoplay() 获取或者设置自动播放属性</span><br><span class="line">currentTime() 设置或者获取当前播放进度</span><br><span class="line">duration() 获取视屏的总长度，一般要等到视屏对象完全加载后才能获取到，一般我们会使用定时轮询的方式来获取总时长</span><br><span class="line">ended() 获取当前视屏对象是否已经处于结束状态</span><br><span class="line">enterFullWindow() 当全屏不支持我们可以视频容器延伸到浏览器将让我们一样宽。经过试验改api完全无法使视屏进入全屏。分析源码后发现真正进入全屏的api应该是requestFullscreen()，但可惜该api只能又手势触发函数执行，连模拟点击都没法触发他。</span><br><span class="line">exitFullscreen() 退出全屏，有效的</span><br><span class="line">exitFullWindow() 退出全屏，试了没什么用</span><br><span class="line">height() 设置/获取播放器的高度</span><br><span class="line">width() 设置/获取播放器的宽度</span><br><span class="line">isFullscreen() 检查是否处于全屏模式</span><br><span class="line">load() 开始加载视屏</span><br><span class="line">loop() 在视频中获取或设置循环属性元素</span><br><span class="line">muted() 获取当前的静音状态</span><br><span class="line">pause() 暂停视频</span><br><span class="line">paused() 检查视屏是否暂停</span><br><span class="line">play() 播放视屏</span><br><span class="line">played() 检查视屏播放状态</span><br><span class="line">preload() 获取或设置预加载属性</span><br><span class="line">ready() 视屏对象加载完成后调用ready中的回调函数</span><br><span class="line">poster() 获取或设置海报图像源url</span><br><span class="line">reset() 重载视屏</span><br><span class="line">src() 更换视频源</span><br></pre></td></tr></table></figure><p>参考<br><a href="https://blog.csdn.net/u014739462/article/details/70849195" target="_blank" rel="noopener">https://blog.csdn.net/u014739462/article/details/70849195</a></p><h2 id="ios"><a href="#ios" class="headerlink" title="ios"></a>ios</h2><p>搞了一下午，下班前终于找到办法了<br>在iOS 10 beta<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;video src=<span class="string">"file.mp4"</span> webkit-playsinline=<span class="string">"true"</span> playsinline=<span class="string">"true"</span>&gt;</span><br></pre></td></tr></table></figure></p><p>正确代码是  webkit-playsinline适用于iOS 10-，playinline适用于iOS 10+。</p><p>参考<br><a href="https://webkit.org/blog/6784/new-video-policies-for-ios/" target="_blank" rel="noopener">https://webkit.org/blog/6784/new-video-policies-for-ios/</a></p><h2 id="宽高自适应"><a href="#宽高自适应" class="headerlink" title="宽高自适应"></a>宽高自适应</h2><p>添加类 vjs-fluid</p><h2 id="android"><a href="#android" class="headerlink" title="android"></a>android</h2><p>层级默认是最高的,只要添加<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">x5-video-player-type=<span class="string">'h5'</span></span><br></pre></td></tr></table></figure></p><h2 id="禁止全屏"><a href="#禁止全屏" class="headerlink" title="禁止全屏"></a>禁止全屏</h2><p>webkit-playsinline=”true” playsinline=”true”</p><p><a href="http://taobaofed.org/blog/2016/05/23/video-player/" target="_blank" rel="noopener">http://taobaofed.org/blog/2016/05/23/video-player/</a><br><a href="https://github.com/Avolons/videojs-tutorial-CN" target="_blank" rel="noopener">中文教程地址</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/Events/Media_events" target="_blank" rel="noopener">MDN</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;info&quot;&gt;&lt;a href=&quot;#info&quot; class=&quot;headerlink&quot; title=&quot;info&quot;&gt;&lt;/a&gt;info&lt;/h2&gt;&lt;p&gt;最近在做视频剪切的一个demo，&lt;br&gt;canplaythrough&lt;/p&gt;
&lt;figure class=&quot;highligh
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>resource</title>
    <link href="http://baiwenhao.github.io/posts/ef66ebae/"/>
    <id>http://baiwenhao.github.io/posts/ef66ebae/</id>
    <published>2018-06-08T06:31:01.000Z</published>
    <updated>2020-10-21T06:38:57.588Z</updated>
    
    <content type="html"><![CDATA[<h2 id="mobile"><a href="#mobile" class="headerlink" title="mobile"></a>mobile</h2><table><thead><tr><th style="text-align:left"><a href="https://hammerjs.github.io/" target="_blank" rel="noopener">hammerjs</a></th><th style="text-align:left">&nbsp;</th><th style="text-align:left">&nbsp;</th></tr></thead><tbody><tr><td style="text-align:left"></td></tr></tbody></table><h2 id="img"><a href="#img" class="headerlink" title="img"></a>img</h2><table><thead><tr><th style="text-align:left"><a href="https://jnordberg.github.io/gif.js/" target="_blank" rel="noopener">gifjs</a></th><th style="text-align:left"><a href="https://github.com/geelen/x-gif" target="_blank" rel="noopener">x-gif</a></th><th style="text-align:left"><a href="https://www.npmjs.com/package/gifsee" target="_blank" rel="noopener">gifsee</a></th></tr></thead><tbody><tr><td style="text-align:left"><a href="http://fabricjs.com/" target="_blank" rel="noopener">fabricjs</a><a href="http://www.tattoofontmaker.com/tattoo-builder/" target="_blank" rel="noopener">（demo）</a></td><td style="text-align:left"><a href="http://events.jackpu.com/core-video-to-gif/" target="_blank" rel="noopener">core-video-to-gif</a></td><td style="text-align:left">&nbsp;</td></tr><tr><td style="text-align:left">参考 <a href="https://giphy.com/create/gifmaker" target="_blank" rel="noopener">gifmaker</a></td><td style="text-align:left"><a href="https://www.canva.com/" target="_blank" rel="noopener">canva</a></td><td style="text-align:left"><a href="https://www.fotor.com.cn" target="_blank" rel="noopener">Fotor</a></td></tr><tr><td style="text-align:left"><a href="http://www.soogif.com/editor" target="_blank" rel="noopener">sogif</a></td><td style="text-align:left"><a href="http://www.51gif.com/gif/makeJ?mode=gif" target="_blank" rel="noopener">51gif</a></td><td style="text-align:left"><a href="https://giphy.com/create/gifmaker" target="_blank" rel="noopener">GIFHY</a></td></tr></tbody></table><p><a href="https://www.cnblogs.com/xxx91hx/p/5192760.html" target="_blank" rel="noopener">https://www.cnblogs.com/xxx91hx/p/5192760.html</a></p><h2 id="font"><a href="#font" class="headerlink" title="font"></a>font</h2><table><thead><tr><th style="text-align:left"><a href="https://github.com/bramstein/fontfaceobserver" target="_blank" rel="noopener">fontfaceobserver</a></th><th style="text-align:left"><a href="https://github.com/purplebamboo/font-carrier" target="_blank" rel="noopener">font-carrier</a></th><th style="text-align:left">&nbsp;</th></tr></thead><tbody><tr><td style="text-align:left">&nbsp;</td><td style="text-align:left">&nbsp;</td><td style="text-align:left">&nbsp;</td></tr></tbody></table><h2 id="javascript"><a href="#javascript" class="headerlink" title="javascript"></a>javascript</h2><table><thead><tr><th style="text-align:left"><a href="https://hammerjs.github.io/" target="_blank" rel="noopener">hammerjs</a></th><th style="text-align:left">&nbsp;</th><th style="text-align:left">&nbsp;</th></tr></thead><tbody><tr><td style="text-align:left"></td></tr></tbody></table><h2 id="code"><a href="#code" class="headerlink" title="code"></a>code</h2><table><thead><tr><th style="text-align:left"><a href="http://runjs.cn/square" target="_blank" rel="noopener">runjs</a></th><th style="text-align:left">&nbsp;</th><th style="text-align:left">&nbsp;</th></tr></thead><tbody><tr><td style="text-align:left"></td></tr></tbody></table><h2 id="blog"><a href="#blog" class="headerlink" title="blog"></a>blog</h2><table><thead><tr><th style="text-align:left"><a href="http://runjs.cn/square" target="_blank" rel="noopener">runjs</a></th><th style="text-align:left">&nbsp;</th><th style="text-align:left">&nbsp;</th></tr></thead><tbody><tr><td style="text-align:left"></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;mobile&quot;&gt;&lt;a href=&quot;#mobile&quot; class=&quot;headerlink&quot; title=&quot;mobile&quot;&gt;&lt;/a&gt;mobile&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;&lt;a href=
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>mobile</title>
    <link href="http://baiwenhao.github.io/posts/3bdf26d6/"/>
    <id>http://baiwenhao.github.io/posts/3bdf26d6/</id>
    <published>2018-06-08T06:27:45.000Z</published>
    <updated>2020-10-21T06:38:57.562Z</updated>
    
    <content type="html"><![CDATA[<h2 id="terminal"><a href="#terminal" class="headerlink" title="terminal"></a>terminal</h2><p><a href="https://github.com/madrobby/zepto/blob/master/src/detect.js#files" target="_blank" rel="noopener">https://github.com/madrobby/zepto/blob/master/src/detect.js#files</a></p><h2 id="wx"><a href="#wx" class="headerlink" title="wx"></a>wx</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> isWeixin = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="regexp">/micromessenger/</span>.test(navigator.userAgent.toLowerCase())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>微信页面 引入jsdk 可以直接调用<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">wx.previewImage(&#123;</span><br><span class="line">  current: e.target.src,</span><br><span class="line">  urls: <span class="keyword">this</span>.list</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h2 id="android"><a href="#android" class="headerlink" title="android"></a>android</h2><p>解决输入框获取焦点后，软键盘挡住input的问题，最近总是碰到这个问题，今天彻底解决下,<br>js 是没办法直接获取软键盘的高度，我这里暂时写成百分比，除非 android 通过参数告知前端<br>如果有兼容性问题存在，请告诉我 qq：17899850 wx：bwh2009</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> slideAndroid = &#123;</span><br><span class="line">  goTop (e, n) &#123;</span><br><span class="line">    <span class="keyword">const</span> scrollTop = <span class="built_in">window</span>.pageYOffset</span><br><span class="line">    <span class="keyword">const</span> top = <span class="keyword">this</span>.getOffset(e.target, <span class="string">'offsetTop'</span>)</span><br><span class="line">    <span class="keyword">const</span> height = <span class="built_in">parseInt</span>(<span class="built_in">window</span>.innerHeight * n) + scrollTop</span><br><span class="line">    btn.innerHTML = scrollTop</span><br><span class="line">    <span class="keyword">if</span> (top &gt; height) &#123;</span><br><span class="line">      <span class="keyword">this</span>.h = <span class="built_in">parseInt</span>(top - height)</span><br><span class="line">      <span class="built_in">document</span>.body.style.height = <span class="built_in">document</span>.body.offsetHeight + <span class="keyword">this</span>.h + <span class="string">'px'</span></span><br><span class="line">      <span class="built_in">window</span>.scrollBy(<span class="number">0</span>, <span class="keyword">this</span>.h)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.h = <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  goDown (e, n) &#123;</span><br><span class="line">    btn.innerHTML = <span class="built_in">window</span>.pageYOffset + <span class="string">'-'</span> + <span class="keyword">this</span>.h</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.h) &#123;</span><br><span class="line">      <span class="built_in">document</span>.body.style.height = <span class="built_in">document</span>.body.offsetHeight - <span class="keyword">this</span>.h + <span class="string">'px'</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">window</span>.pageYOffset === <span class="keyword">this</span>.h) &#123;</span><br><span class="line">        <span class="built_in">window</span>.scrollTo(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">window</span>.scrollTo(<span class="number">0</span>, <span class="built_in">window</span>.pageYOffset - <span class="keyword">this</span>.h)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  getOffset (el, type) &#123;</span><br><span class="line">    <span class="keyword">let</span> off = el[type]</span><br><span class="line">    <span class="keyword">let</span> par = el.offsetParent</span><br><span class="line">    <span class="keyword">while</span> (par) &#123;</span><br><span class="line">      off += par[type]</span><br><span class="line">      par = par.offsetParent</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> off + el.offsetHeight</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用方法</span></span><br><span class="line"><span class="keyword">const</span> android = navigator.userAgent.match(<span class="regexp">/(Android);?[\s\/]+([\d.]+)?/</span>)</span><br><span class="line"><span class="keyword">if</span> (android) &#123;</span><br><span class="line">  <span class="keyword">switch</span> (t) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'focus'</span>:</span><br><span class="line">      slideAndroid.goTop(e, <span class="number">0.55</span>)</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">'blur'</span>:</span><br><span class="line">      slideAndroid.goDown(e, <span class="number">0.55</span>)</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="clip"><a href="#clip" class="headerlink" title="clip"></a>clip</h2><p>目前都是内侧版本，有时图片和文字会丢失，记得保存的时候输入框失去焦点，图片编译成base64，就没问题了<br><a href="https://github.com/eKoopmans/html2canvas/tree/develop/dist" target="_blank" rel="noopener">https://github.com/eKoopmans/html2canvas/tree/develop/dist</a><br><a href="http://html2canvas.hertzen.com/configuration/" target="_blank" rel="noopener">http://html2canvas.hertzen.com/configuration/</a><br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">html2canvas($(<span class="string">".box"</span>), &#123;</span><br><span class="line">  allowTaint: <span class="literal">true</span>,</span><br><span class="line">  taintTest: <span class="literal">false</span>,</span><br><span class="line">  width: w,</span><br><span class="line">  height: h,</span><br><span class="line">  <span class="comment">// window.devicePixelRatio是设备像素比</span></span><br><span class="line">  dpi: <span class="built_in">window</span>.devicePixelRatio,</span><br><span class="line">  onrendered: <span class="function"><span class="keyword">function</span>(<span class="params">canvas</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">const</span> dataUrl = canvas.toDataURL(<span class="string">"image/png"</span>, <span class="number">1.0</span>),</span><br><span class="line">            newImg = <span class="built_in">document</span>.createElement(<span class="string">"img"</span>);</span><br><span class="line">      newImg.src = dataUrl;</span><br><span class="line">      $(<span class="string">'.box'</span>).empty().append(newImg);</span><br><span class="line">      newImg.style.width = <span class="string">'100%'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h2 id="FastClick"><a href="#FastClick" class="headerlink" title="FastClick"></a>FastClick</h2><p><a href="https://www.cnblogs.com/vajoy/p/5522114.html" target="_blank" rel="noopener">https://www.cnblogs.com/vajoy/p/5522114.html</a><br><a href="http://www.cnblogs.com/yexiaochai/p/3442220.html" target="_blank" rel="noopener">http://www.cnblogs.com/yexiaochai/p/3442220.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;terminal&quot;&gt;&lt;a href=&quot;#terminal&quot; class=&quot;headerlink&quot; title=&quot;terminal&quot;&gt;&lt;/a&gt;terminal&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/madrobby/zepto/blo
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>html</title>
    <link href="http://baiwenhao.github.io/posts/1879f8e5/"/>
    <id>http://baiwenhao.github.io/posts/1879f8e5/</id>
    <published>2018-06-05T05:41:49.000Z</published>
    <updated>2020-10-21T06:38:57.573Z</updated>
    
    <content type="html"><![CDATA[<h2 id="input"><a href="#input" class="headerlink" title="input"></a>input</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;input autofocus&gt;</span><br><span class="line">&lt;input required&gt;</span><br><span class="line">&lt;input type=&quot;text&quot;&gt;</span><br><span class="line">&lt;input type=&quot;url&quot;&gt;</span><br><span class="line">&lt;input type=&quot;password&quot; placeholder=&quot;password&quot;&gt;</span><br><span class="line">&lt;input type=&quot;redio&quot; checked&gt;</span><br><span class="line">&lt;input type=&quot;checkbox&quot; checked&gt;</span><br><span class="line">&lt;input type=&quot;number&quot; min=0 max=15 step=3&gt;</span><br><span class="line">&lt;input type=&quot;range&quot; min=0 max=15 step=3&gt;</span><br><span class="line">&lt;input type=&quot;date&quot;&gt;</span><br><span class="line">&lt;input type=&quot;month&quot;&gt;</span><br><span class="line">&lt;input type=&quot;week&quot;&gt;</span><br><span class="line">&lt;input type=&quot;time&quot;&gt;</span><br><span class="line">&lt;input type=&quot;datetime&quot;&gt;</span><br><span class="line">&lt;input type=&quot;datetime-local&quot;&gt;</span><br><span class="line">&lt;input type=&quot;color&quot; value=&quot;#e76252&quot;&gt;</span><br><span class="line">&lt;input type=&quot;search&quot;&gt;</span><br><span class="line">&lt;input type=&quot;file&quot;&gt;</span><br><span class="line">&lt;input type=&quot;submit&quot;&gt;</span><br><span class="line">&lt;input type=&quot;reset&quot;&gt;</span><br><span class="line">&lt;input type=&quot;email&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;select&gt;</span><br><span class="line">  &lt;optgroup label=&quot;option group 1&quot;&gt;</span><br><span class="line">    &lt;option&gt;&lt;/option&gt;</span><br><span class="line">  &lt;/optgroup&gt;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line">&lt;fieldset&gt;</span><br><span class="line">  &lt;legend&gt;Legend&lt;/legend&gt;</span><br><span class="line">  &lt;label for=&quot;field&quot;&gt;Label&lt;/label&gt;</span><br><span class="line">  &lt;input id=&quot;filed&quot;&gt;</span><br><span class="line">&lt;/fieldset&gt;</span><br></pre></td></tr></table></figure><p>参考：<br><a href="http://nativeformelements.com/" target="_blank" rel="noopener">http://nativeformelements.com/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;input&quot;&gt;&lt;a href=&quot;#input&quot; class=&quot;headerlink&quot; title=&quot;input&quot;&gt;&lt;/a&gt;input&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>fabric</title>
    <link href="http://baiwenhao.github.io/posts/6de370a3/"/>
    <id>http://baiwenhao.github.io/posts/6de370a3/</id>
    <published>2017-12-24T08:34:26.000Z</published>
    <updated>2020-10-21T06:38:57.568Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>允许您 canvas 使用JavaScript 轻松创建诸如矩形，圆形，三角形等多边形或由多条路径组成的更复杂形状的简单形状到网页的HTML 元素上。<br>Fabric.js将允许您用鼠标操作这些对象的大小，位置和旋转。还可以更改这些对象的某些属性，例如网页的颜色，透明度，深度位置或使用Fabric.js库选择这些对象的组。<br>Fabric.js也将允许你将一个SVG图像转换成JavaScript数据，用于将其放到 canvas 元素上</p><h3 id="FileReader"><a href="#FileReader" class="headerlink" title="FileReader"></a>FileReader</h3><p>用到构造函数 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/FileReader" target="_blank">FileReader</a> 读取input选择图片后返回的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/FileList" target="_blank" rel="noopener">FileList</a> 对象</p><h3 id="code"><a href="#code" class="headerlink" title="code"></a>code</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 绘制方形</span></span><br><span class="line"><span class="keyword">var</span> rect = <span class="keyword">new</span> fabric.Rect(&#123;</span><br><span class="line">  left: <span class="number">100</span>,</span><br><span class="line">  top: <span class="number">100</span>,</span><br><span class="line">  fill: <span class="string">'red'</span>,</span><br><span class="line">  width: <span class="number">30</span>,</span><br><span class="line">  height: <span class="number">30</span>,</span><br><span class="line">  selectable: <span class="literal">false</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">rect.setLeft(rect.getLeft() + <span class="number">10</span>)</span><br><span class="line">canvas.renderAll()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绘制圆形</span></span><br><span class="line"><span class="keyword">var</span> circle = <span class="keyword">new</span> fabric.Circle(&#123;</span><br><span class="line">  radius: <span class="number">50</span>,</span><br><span class="line">  fill: <span class="string">'green'</span>,</span><br><span class="line">  left: <span class="number">200</span>,</span><br><span class="line">  top: <span class="number">200</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绘制三角形</span></span><br><span class="line"><span class="keyword">var</span> triangle = <span class="keyword">new</span> fabric.Triangle(&#123;</span><br><span class="line">    width: <span class="number">80</span>,</span><br><span class="line">    height: <span class="number">100</span>,</span><br><span class="line">    fill: <span class="string">'blue'</span>,</span><br><span class="line">    left: <span class="number">50</span>,</span><br><span class="line">    top: <span class="number">50</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绘制不规则图形：</span></span><br><span class="line"><span class="keyword">var</span> path = <span class="keyword">new</span> fabric.Path(<span class="string">'M 0 0 L 200 100 L 170 200 z'</span>)</span><br><span class="line">path.set(&#123; <span class="attr">left</span>: <span class="number">120</span>, <span class="attr">top</span>: <span class="number">120</span>,<span class="attr">fill</span>:<span class="string">'red'</span> &#125;)</span><br><span class="line">canvas.add(path)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">上边的代码需要注意的是第二行， fabric.Path( )方法里边跟了一串字符串参数.</span></span><br><span class="line"><span class="comment">“M”代表“移动”命令，这个“M 00” 代表把画笔移动到（0,0）点坐标。</span></span><br><span class="line"><span class="comment">“L”代表“线”，“L 200 100 ”的意思是使用钢笔画一条线，从（0,0）坐标画到（200,100）坐标。</span></span><br><span class="line"><span class="comment">“z” 代表让图形闭合路径。就这样我们轻松的画出了一个三角形。</span></span><br><span class="line"><span class="comment">画好三角形后，我们可以用set( )方法对三角形的位置、颜色、角度、透明度等属性进行设置。</span></span><br><span class="line"><span class="comment">虽然用路径画图形很简单，但图形比较复杂时，你会发现这很难控制，</span></span><br><span class="line"><span class="comment">代码会变的臃肿而不可阅读，在实际工作中没有这样使用的。</span></span><br><span class="line"><span class="comment">我们可以用svg来代替这种路径的形式</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加文字</span></span><br><span class="line"><span class="keyword">var</span> text = <span class="keyword">new</span> fabric.Text(<span class="string">'hello world'</span>, &#123;</span><br><span class="line">  fontSize: <span class="number">30</span>,</span><br><span class="line">  originX: <span class="string">'center'</span>,</span><br><span class="line">  originY: <span class="string">'center'</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加组</span></span><br><span class="line"><span class="keyword">var</span> group = <span class="keyword">new</span> fabric.Group([ circle, text ], &#123;</span><br><span class="line">  left: <span class="number">150</span>,</span><br><span class="line">  top: <span class="number">100</span>,</span><br><span class="line">  angle: <span class="number">-10</span></span><br><span class="line">&#125;)</span><br><span class="line">group.item(<span class="number">0</span>).setFill(<span class="string">'red'</span>)</span><br><span class="line">group.item(<span class="number">1</span>).set(&#123;</span><br><span class="line">  text: <span class="string">'trololo'</span>,</span><br><span class="line">  fill: <span class="string">'white'</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加图片</span></span><br><span class="line"><span class="keyword">var</span> imgElement = <span class="built_in">document</span>.getElementById(<span class="string">'img'</span>)</span><br><span class="line"><span class="keyword">var</span> imgInstance = <span class="keyword">new</span> fabric.Image(imgElement, &#123;</span><br><span class="line">  left: <span class="number">100</span>,</span><br><span class="line">  top: <span class="number">100</span>,</span><br><span class="line">  width: <span class="number">200</span>,</span><br><span class="line">  height: <span class="number">100</span>,</span><br><span class="line">  angle: <span class="number">30</span> <span class="comment">// 设置旋转</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">canvas.add(imgInstance)</span><br><span class="line"></span><br><span class="line"><span class="comment">// js中插入图片</span></span><br><span class="line"><span class="keyword">var</span> canvas = <span class="keyword">new</span> fabric.Canvas(<span class="string">'canvas'</span>)</span><br><span class="line">fabric.Image.fromURL(<span class="string">'./2.png'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">oImg</span>) </span>&#123;</span><br><span class="line">  oImg.scale(<span class="number">0.1</span>) <span class="comment">// 图片缩小10倍</span></span><br><span class="line">  oImg.setWidth(<span class="number">200</span>)</span><br><span class="line">  canvas.add(oImg)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 动画</span></span><br><span class="line">rect.set(<span class="string">'angle'</span>, <span class="number">45</span>)</span><br><span class="line">rect.animate(<span class="string">'angle'</span>, <span class="string">'+=45'</span>, &#123;</span><br><span class="line">  duration: <span class="number">4000</span>,</span><br><span class="line">  easing: fabric.util.ease.easeOutBounce,</span><br><span class="line">  onChange: canvas.renderAll.bind(canvas)</span><br><span class="line">&#125;)</span><br><span class="line">&lt;a href=<span class="string">"http://fabricjs.com/docs/fabric.util.ease.html"</span>&gt;doc文档&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 添加过滤器</span></span><br><span class="line"><span class="regexp">var canvas = new fabric.Canvas('canvas');</span></span><br><span class="line"><span class="regexp">fabric.Image.fromURL('2.jpg', function (img) &#123;</span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/ 添加过滤器</span></span><br><span class="line"><span class="regexp">  img.filters.push(new fabric.Image.filters.Grayscale())</span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/ 应用过滤器并重新渲染画布执行</span></span><br><span class="line"><span class="regexp">  img.applyFilters(canvas.renderAll.bind(canvas))</span></span><br><span class="line"><span class="regexp">  canvas.add(img)</span></span><br><span class="line"><span class="regexp">  img.on('selected', () =&gt; &#123; /</span><span class="regexp">/ mouse:down | scaling | modified</span></span><br><span class="line"><span class="regexp">    console.log('选中')</span></span><br><span class="line"><span class="regexp">  &#125;)</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 设置选中项</span></span><br><span class="line"><span class="regexp">canvas.setActiveObject(canvasimg)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 设置可见</span></span><br><span class="line"><span class="regexp"> line2.set(&#123; visible: true &#125;)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 设置图层</span></span><br><span class="line"><span class="regexp">FlowChar.sendToBack = () =&gt; &#123;</span></span><br><span class="line"><span class="regexp">  var activeObject = this.canvas.getActiveObject();</span></span><br><span class="line"><span class="regexp">  if (activeObject) &#123;</span></span><br><span class="line"><span class="regexp">    canvas.sendToBack(activeObject);</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// this.canvas.setActiveObject(text)</span></span><br><span class="line"><span class="comment">// text.selectAll()</span></span><br><span class="line"><span class="comment">// text.enterEditing()</span></span><br><span class="line"><span class="comment">// text.hiddenTextarea.focus() // 无法失去焦点</span></span><br></pre></td></tr></table></figure><h3 id="Reference-address"><a href="#Reference-address" class="headerlink" title="Reference address"></a>Reference address</h3><p><a href="http://fabricjs.com/" target="_blank">demo</a><br><a href="http://fabricjs.com/benchmarks/" target="_blank">benchmarks</a><br><a href="https://github.com/kangax/fabric.js" target="_blank">github</a></p><h3 id="cdn"><a href="#cdn" class="headerlink" title="cdn"></a>cdn</h3><p><a href="https://cdnjs.com/libraries/fabric.js/2.0.1" target="_blank" rel="noopener">https://cdnjs.com/libraries/fabric.js/2.0.1</a></p><h3 id="双击事件"><a href="#双击事件" class="headerlink" title="双击事件"></a>双击事件</h3><p><a href="https://stackoverflow.com/questions/23418055/fabricjs-double-click-on-objects" target="_blank" rel="noopener">https://stackoverflow.com/questions/23418055/fabricjs-double-click-on-objects</a></p><h3 id="自动换行"><a href="#自动换行" class="headerlink" title="自动换行"></a>自动换行</h3><p><a href="http://jsfiddle.net/maxenko/nyw5myq5/4/" target="_blank" rel="noopener">http://jsfiddle.net/maxenko/nyw5myq5/4/</a></p><p>canvas教程<br><a href="https://mobiforge.com/design-development/html5-mobile-web-canvas" target="_blank" rel="noopener">https://mobiforge.com/design-development/html5-mobile-web-canvas</a></p><p>感谢这个问题<br><a href="https://stackoverflow.com/questions/47010467/fit-the-background-image-to-canvas-size-with-fabric-js" target="_blank" rel="noopener">https://stackoverflow.com/questions/47010467/fit-the-background-image-to-canvas-size-with-fabric-js</a></p><p>活动区域动画不错<br><a href="https://www.zazzle.com/coach_gifts_basketball_your_colors_8_text_boxes-256691781630798133" target="_blank" rel="noopener">https://www.zazzle.com/coach_gifts_basketball_your_colors_8_text_boxes-256691781630798133</a></p><p>参考：<br><a href="http://blog.csdn.net/dananhai381/article/details/14169665" target="_blank" rel="noopener">http://blog.csdn.net/dananhai381/article/details/14169665</a><br><a href="https://www.npmjs.com/package/font-carrier" target="_blank" rel="noopener">https://www.npmjs.com/package/font-carrier</a><br><a href="http://blog.csdn.net/u014032819/article/details/77864682" target="_blank" rel="noopener">http://blog.csdn.net/u014032819/article/details/77864682</a><br><a href="http://blog.csdn.net/yanzisu_congcong/article/details/77840526" target="_blank" rel="noopener">http://blog.csdn.net/yanzisu_congcong/article/details/77840526</a><br><a href="https://www.cnblogs.com/vipstone/p/8716419.html" target="_blank" rel="noopener">https://www.cnblogs.com/vipstone/p/8716419.html</a></p><p>fabric.js介绍<br>fabric.js是什么<br>fabric.js是可以简化canvas编写的js库，提供canvas缺少的对象模型，包含动画、数据序列号和反序列化的等高级功能的js库，开源项目，在GitHub有很多人贡献。</p><p>fabric.js优缺点<br>优点：fabric提供超好的画布能力.<br>缺点：api超级烂，没有相应的demo代码，上手难度较大.</p><p>fabric.js使用笔记<br>对象</p><p>fabric.Circle 圆<br>fabric.Ellipse  椭圆<br>fabric.Line 直线<br>fabric.Polygon<br>fabric.Polyline<br>fabric.Rect 矩形<br>fabric.Triangle 三角形</p><p>方法<br>add(object) 添加<br>insertAt(object,index) 添加<br>remove(object) 移除<br>forEachObject 循环遍历<br>getObjects() 获取所有对象<br>item(int) 获取子项<br>isEmpty() 判断是否空画板<br>size() 画板元素个数<br>contains(object) 查询是否包含某个元素<br>fabric.util.cos<br>fabric.util.sin<br>fabric.util.drawDashedLine 绘制虚线<br>getWidth() setWidth()<br>getHeight()<br>clear() 清空<br>renderAll() 重绘<br>requestRenderAll() 请求重新渲染<br>rendercanvas() 重绘画板<br>getCenter().top/left 获取中心坐标<br>toDatalessJSON() 画板信息序列化成最小的json<br>toJSON() 画板信息序列化成json<br>moveTo(object,index) 移动<br>dispose() 释放<br>setCursor() 设置手势图标<br>getSelectionContext()获取选中的context<br>getSelectionElement()获取选中的元素<br>getActiveObject() 获取选中的对象<br>getActiveObjects() 获取选中的多个对象<br>discardActiveObject()取消当前选中对象<br>isType() 图片的类型<br>setColor(color) = canvas.set(“full”,””);<br>rotate() 设置旋转角度<br>setCoords() 设置坐标</p><p>事件<br>object:added<br>object:removed<br>object:modified<br>object:rotating<br>object:scaling<br>object:moving<br>object:selected 这个方法v2已经废弃，使用selection:created替代，多选不会触发<br>before:selection:cleared<br>selection:cleared<br>selection:updated<br>selection:created<br>path:created<br>mouse:down<br>mouse:move<br>mouse:up<br>mouse:over<br>mouse:out<br>mouse:dblclick</p><p>常用属性<br>canvas.isDrawingMode = true; 可以自由绘制<br>canvas.selectable = false; 控件不能被选择，不会被操作<br>canvas.selection = true; 画板显示选中<br>canvas.skipTargetFind = true; 整个画板元素不能被选中<br>canvas.freeDrawingBrush.color = “#E34F51” 设置自由绘画笔的颜色<br>freeDrawingBrush.width 自由绘笔触宽度</p><p>IText的方法<br>selectAll() 选择全部<br>getSelectedText() 获取选中的文本<br>exitEditing() 退出编辑模式</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h3&gt;&lt;p&gt;允许您 canvas 使用JavaScript 轻松创建诸如
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>socker</title>
    <link href="http://baiwenhao.github.io/posts/ec86cd8e/"/>
    <id>http://baiwenhao.github.io/posts/ec86cd8e/</id>
    <published>2017-09-19T02:29:35.000Z</published>
    <updated>2020-10-21T06:38:57.589Z</updated>
    
    <content type="html"><![CDATA[<h2 id="socker-io"><a href="#socker-io" class="headerlink" title="socker.io"></a>socker.io</h2><h2 id="webSocker"><a href="#webSocker" class="headerlink" title="webSocker"></a>webSocker</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;socker-io&quot;&gt;&lt;a href=&quot;#socker-io&quot; class=&quot;headerlink&quot; title=&quot;socker.io&quot;&gt;&lt;/a&gt;socker.io&lt;/h2&gt;&lt;h2 id=&quot;webSocker&quot;&gt;&lt;a href=&quot;#webSocker&quot; class
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>docker</title>
    <link href="http://baiwenhao.github.io/posts/f255ffad/"/>
    <id>http://baiwenhao.github.io/posts/f255ffad/</id>
    <published>2017-07-24T07:08:20.000Z</published>
    <updated>2020-10-21T06:38:57.567Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><p>docker info<br>docker images<br>docker ps -l || -a<br>docker version<br>docker stop id<br>docker start id<br>docker rmi id<br>docker rm name<br>docker search name<br>docker pull name</p><h2 id="mongodb"><a href="#mongodb" class="headerlink" title="mongodb"></a>mongodb</h2><p>Status: Downloaded newer image for mongo:latest (下载成功)<br>docker run -d -v /var/lib/mongo:/data/db -v /home/user/mongo.conf:/etc/mongo.conf -p port:port image_name</p><p>docker run -p 27017:27017 -v /Users/baiwenhao/workSpace/mongodb/data:/data -d mongo<br>docker run -p 27017:27017 -v /c/Users/Administrator/Desktop/mongodb/data:/data -d mongo </p><p>-p 27017:27017 将容器的27017 端口映射到主机的27017 端口<br>-v $PWD/db:/data/db 将主机中当前目录下的db挂载到容器的/data/db，作为mongo数据存储目录</p><h2 id="镜像加速"><a href="#镜像加速" class="headerlink" title="镜像加速"></a>镜像加速</h2><p>容器镜像服务 =&gt; 镜像加速器 （我的加速地址） <a href="https://k454h3he.mirror.aliyuncs.com" target="_blank" rel="noopener">https://k454h3he.mirror.aliyuncs.com</a><br>docker的配置中找到daemon =&gt; registry mirrors (添加地址) =&gt; apply</p><p>参考<br><a href="https://docs.docker.com/samples/library/mongo/#shared-tags" target="_blank" rel="noopener">https://docs.docker.com/samples/library/mongo/#shared-tags</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基本命令&quot;&gt;&lt;a href=&quot;#基本命令&quot; class=&quot;headerlink&quot; title=&quot;基本命令&quot;&gt;&lt;/a&gt;基本命令&lt;/h2&gt;&lt;p&gt;docker info&lt;br&gt;docker images&lt;br&gt;docker ps -l || -a&lt;br&gt;docker v
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Axios源码</title>
    <link href="http://baiwenhao.github.io/posts/a09486d2/"/>
    <id>http://baiwenhao.github.io/posts/a09486d2/</id>
    <published>2017-06-23T02:12:01.000Z</published>
    <updated>2020-10-21T06:38:57.563Z</updated>
    
    <content type="html"><![CDATA[<h2 id="util-js"><a href="#util-js" class="headerlink" title="util.js"></a>util.js</h2><p>工具类里全是自己封装的函数，没有任何es5-es6的语法</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  isArray: isArray,</span><br><span class="line">  isArrayBuffer: isArrayBuffer,</span><br><span class="line">  isBuffer: isBuffer,</span><br><span class="line">  isFormData: isFormData,</span><br><span class="line">  isArrayBufferView: isArrayBufferView,</span><br><span class="line">  isString: isString,</span><br><span class="line">  isNumber: isNumber,</span><br><span class="line">  isObject: isObject,</span><br><span class="line">  isUndefined: isUndefined,</span><br><span class="line">  isDate: isDate,</span><br><span class="line">  isFile: isFile,</span><br><span class="line">  isBlob: isBlob,</span><br><span class="line">  isFunction: isFunction,</span><br><span class="line">  isStream: isStream,</span><br><span class="line">  isURLSearchParams: isURLSearchParams,</span><br><span class="line">  isStandardBrowserEnv: isStandardBrowserEnv,</span><br><span class="line">  forEach: forEach,</span><br><span class="line">  merge: merge,</span><br><span class="line">  extend: extend,</span><br><span class="line">  trim: trim</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>is系列用于判断对象数据类型，统一提取toString方法，通过call动态绑定到对象上并执行，对比对象的字符串形式返回true和false</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> toString = <span class="built_in">Object</span>.prototype.toString</span><br></pre></td></tr></table></figure><p>为什么要提取toString函数呢 ？<br>内置对象均来自Object，所以都可以执行该方法，但是内置对象们都重写了toString函数，使之更适合自身的功能需要</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数组</span></span><br><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">array.toString() <span class="comment">// '1,2'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 日期</span></span><br><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2017</span>, <span class="number">6</span>, <span class="number">23</span>, <span class="number">11</span>, <span class="number">9</span>, <span class="number">9</span>, <span class="number">100</span>)</span><br><span class="line">date.toString() <span class="comment">// Sun Jul 23 2017 11:09:09 GMT+0800 (CST) (中国标准时间)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数字</span></span><br><span class="line"><span class="keyword">var</span> num =  <span class="number">59.9</span></span><br><span class="line">num.toString() <span class="comment">// 59.9</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 布尔</span></span><br><span class="line"><span class="keyword">var</span> bool = <span class="literal">true</span></span><br><span class="line">bool.toString() <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Object</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">name</span>: <span class="string">"张三"</span>, <span class="attr">age</span>: <span class="number">18</span>&#125;</span><br><span class="line">obj.toString() <span class="comment">// [object Object]</span></span><br></pre></td></tr></table></figure><p>剩下forEach，merge，extend，trim 函数</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 可遍历数组或对象，回调参数依次是属性值，下标或属性名，原始对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">forEach</span> (<span class="params">obj, fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (obj === <span class="literal">null</span> || <span class="keyword">typeof</span> obj === <span class="string">'undefined'</span>) <span class="keyword">return</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> obj !== <span class="string">'object'</span> &amp;&amp; !isArray(obj)) obj = [obj]</span><br><span class="line">  <span class="keyword">if</span> (isArray(obj)) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, l = obj.length; i &lt; l; i++) &#123;</span><br><span class="line">      fn.call(<span class="literal">null</span>, obj[i], i, obj)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">Object</span>.prototype.hasOwnProperty.call(obj, key)) &#123;</span><br><span class="line">        fn.call(<span class="literal">null</span>, obj[key], key, obj)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 遍历b，当b有function时就把this绑到第三个对象上，并覆盖到a对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">extend</span>(<span class="params">a, b, thisArg</span>) </span>&#123;</span><br><span class="line">  forEach(b, <span class="function"><span class="keyword">function</span> <span class="title">assignValue</span>(<span class="params">val, key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (thisArg &amp;&amp; <span class="keyword">typeof</span> val === <span class="string">'function'</span>) &#123;</span><br><span class="line">      a[key] = bind(val, thisArg)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      a[key] = val</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 合并对象，返回新对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">merge</span>(<span class="params"><span class="regexp">/* obj1, obj2, obj3, ... */</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> result = &#123;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">assignValue</span>(<span class="params">val, key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> result[key] === <span class="string">'object'</span> &amp;&amp; <span class="keyword">typeof</span> val === <span class="string">'object'</span>) &#123;</span><br><span class="line">      result[key] = merge(result[key], val) <span class="comment">// 递归合并子对象</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      result[key] = val</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, l = <span class="built_in">arguments</span>.length; i &lt; l; i++) &#123;</span><br><span class="line">    forEach(<span class="built_in">arguments</span>[i], assignValue) <span class="comment">// 逐个遍历，并添加到result对象里</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 去掉左右空格</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trim</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> str.replace(<span class="regexp">/^\s*/</span>, <span class="string">''</span>).replace(<span class="regexp">/\s*$/</span>, <span class="string">''</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>眼尖的同学会发现extend函数还用到bind函数</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> <span class="title">bind</span>(<span class="params">fn, thisArg</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">wrap</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> args = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="built_in">arguments</span>.length);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">      args[i] = <span class="built_in">arguments</span>[i]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fn.apply(thisArg, args)<span class="comment">// fn函数内部this指向thisArg，再用函数包裹并返回，参数个数不固定，因此遍历成数组传入apply执行并返回改函数</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>util模块的方法在其他模块里多次复用，因此要搞懂</p><h2 id="default-js"><a href="#default-js" class="headerlink" title="default.js"></a>default.js</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 最终导出的对象如下</span></span><br><span class="line">&#123;</span><br><span class="line">  adapter: [<span class="built_in">Function</span>: httpAdapter],</span><br><span class="line">  transformRequest: [</span><br><span class="line">    [<span class="built_in">Function</span>: transformRequest]</span><br><span class="line">  ],</span><br><span class="line">  transformResponse: [</span><br><span class="line">    [<span class="built_in">Function</span>: transformResponse]</span><br><span class="line">  ],</span><br><span class="line">  timeout: <span class="number">0</span>,</span><br><span class="line">  xsrfCookieName: <span class="string">'XSRF-TOKEN'</span>,</span><br><span class="line">  xsrfHeaderName: <span class="string">'X-XSRF-TOKEN'</span>,</span><br><span class="line">  maxContentLength: <span class="number">-1</span>,</span><br><span class="line">  validateStatus: [<span class="built_in">Function</span>: validateStatus],</span><br><span class="line">  headers: &#123;</span><br><span class="line">    common: &#123; <span class="attr">Accept</span>: <span class="string">'application/json, text/plain, */*'</span> &#125;,</span><br><span class="line">    <span class="keyword">delete</span>: &#123;&#125;,</span><br><span class="line">    get: &#123;&#125;,</span><br><span class="line">    head: &#123;&#125;,</span><br><span class="line">    post: &#123; <span class="string">'Content-Type'</span>: <span class="string">'application/x-www-form-urlencoded'</span> &#125;,</span><br><span class="line">    put: &#123; <span class="string">'Content-Type'</span>: <span class="string">'application/x-www-form-urlencoded'</span> &#125;,</span><br><span class="line">    patch: &#123; <span class="string">'Content-Type'</span>: <span class="string">'application/x-www-form-urlencoded'</span> &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>##</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;util-js&quot;&gt;&lt;a href=&quot;#util-js&quot; class=&quot;headerlink&quot; title=&quot;util.js&quot;&gt;&lt;/a&gt;util.js&lt;/h2&gt;&lt;p&gt;工具类里全是自己封装的函数，没有任何es5-es6的语法&lt;/p&gt;
&lt;figure class=&quot;hi
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>front-end</title>
    <link href="http://baiwenhao.github.io/posts/4b4371a7/"/>
    <id>http://baiwenhao.github.io/posts/4b4371a7/</id>
    <published>2017-06-21T09:28:28.000Z</published>
    <updated>2020-10-21T06:38:57.569Z</updated>
    
    <content type="html"><![CDATA[<!--![logo](frontEnd/2.jpg) --><h2 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h2><table><thead><tr><th>Article</th><th style="text-align:center">Article</th></tr></thead><tbody><tr><td><a href="https://github.com/Wscats/Good-text-Share/issues/57" target="_blank" rel="noopener">Javascript深浅拷贝</a></td><td style="text-align:center"><a href="https://github.com/Wscats/Good-text-Share/issues/56" target="_blank" rel="noopener">Javascript中的apply和call继承</a></td></tr><tr><td><a href="https://github.com/Wscats/Good-text-Share/issues/55" target="_blank" rel="noopener">Javascript的jsonp原理</a></td><td style="text-align:center"><a href="https://github.com/Wscats/Good-text-Share/issues/49" target="_blank" rel="noopener">Javascript监听触摸事件</a></td></tr><tr><td><a href="https://github.com/Wscats/Good-text-Share/issues/52" target="_blank" rel="noopener">Javascript中的var self = this</a></td><td style="text-align:center"><a href="https://github.com/Wscats/Good-text-Share/issues/32" target="_blank" rel="noopener">Javascript面向对象编程</a></td></tr><tr><td><a href="https://github.com/Wscats/Good-text-Share/issues/14" target="_blank" rel="noopener">Javascript滑屏切换场景</a></td><td style="text-align:center"><a href="https://github.com/Wscats/Good-text-Share/issues/16" target="_blank" rel="noopener">Javascript获取经纬度，关于调用百度API的问题</a></td></tr><tr><td><a href="https://github.com/Wscats/Good-text-Share/issues/3" target="_blank" rel="noopener">妙用Javascript运算符</a></td><td style="text-align:center"><a href="https://github.com/Wscats/Good-text-Share/issues/1" target="_blank" rel="noopener">深入理解Javascript函数编程</a></td></tr><tr><td><a href="https://github.com/Wscats/Good-text-Share/issues/4" target="_blank" rel="noopener">Javascript的setTimeout详细用例</a></td><td style="text-align:center"><a href="https://github.com/Wscats/Good-text-Share/issues/42" target="_blank" rel="noopener">sessionstorage，localstorage和cookie</a></td></tr><tr><td><a href="https://github.com/Wscats/Good-text-Share/issues/11" target="_blank" rel="noopener">JS日期对比</a></td><td style="text-align:center"><a href="https://github.com/Wscats/Good-text-Share/issues/10" target="_blank" rel="noopener">JSONP参考文章</a></td></tr><tr><td><a href="https://wscats.github.io/angular-demo/createElement.html" target="_blank" rel="noopener">Javascript的createElement</a></td><td style="text-align:center"><a href="https://wscats.github.io/angular-demo/createDocumentFragment.html" target="_blank" rel="noopener">Javascript的createDocumentFragment</a></td></tr><tr><td><a href="https://wscats.github.io/angular-demo/sessionStoragelocalStorage.html" target="_blank" rel="noopener">sessionStorage和localStorage</a></td><td style="text-align:center"><a href="https://wscats.github.io/angular-demo/像素动画.html" target="_blank" rel="noopener">像素帧动画</a></td></tr><tr><td><strong>Reference</strong></td><td style="text-align:center"><strong>Reference</strong></td></tr><tr><td><a href="https://github.com/windiest/Front-end-tutorial" target="_blank" rel="noopener">收集最全前端学习资料</a></td><td style="text-align:center"><a href="https://github.com/Wscats/Good-text-Share" target="_blank" rel="noopener">最全前端教程-猫的回忆录</a></td></tr><tr><td><a href="https://segmentfault.com/a/1190000002640298" target="_blank" rel="noopener">JavaScript中的this陷阱的最全收集–没有之一</a></td><td style="text-align:center"><a href="https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch1.html" target="_blank" rel="noopener">JS函数式编程指南</a></td></tr><tr><td><a href="http://liubin.github.io/promises-book" target="_blank" rel="noopener">JavaScript Promise迷你书（中文版）</a></td><td style="text-align:center"><a href="http://javascript.ruanyifeng.com" target="_blank" rel="noopener">阮一峰 Javascript</a></td></tr><tr><td><a href="https://www.awesomes.cn/rank" target="_blank" rel="noopener">前端 TOP 100</a></td><td style="text-align:center"><a href="http://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000" target="_blank" rel="noopener">小白的零基础JavaScript全栈教程</a></td></tr></tbody></table><h2 id="UI"><a href="#UI" class="headerlink" title="UI"></a>UI</h2><table><thead><tr><th>Reference</th><th style="text-align:center">Reference</th></tr></thead><tbody><tr><td><a href="https://github.com/weui/weui" target="_blank" rel="noopener">WeUI</a></td><td style="text-align:center"><a href="http://www.bootcss.com" target="_blank" rel="noopener">Bootstrap</a></td></tr><tr><td><a href="http://dev.dcloud.net.cn/mui/" target="_blank" rel="noopener">MUI-最接近原生APP体验的高性能前端框架</a></td><td style="text-align:center"><a href="http://amazeui.org" target="_blank" rel="noopener">Amaze UI中国首个开源HTML5跨屏前端框架</a></td></tr><tr><td><a href="http://frozenui.github.io/" target="_blank" rel="noopener">Frozen UI</a></td><td style="text-align:center"><a href="http://foundation.zurb.com/" target="_blank" rel="noopener">Foundation</a></td></tr><tr><td><a href="http://sui.taobao.org/sui/docs/" target="_blank" rel="noopener">SUI</a></td><td style="text-align:center"><a href="https://github.com/easysoft/zui" target="_blank" rel="noopener">ZUI</a></td></tr><tr><td><a href="http://m.sui.taobao.org" target="_blank" rel="noopener">淘宝HTML5前端框架</a></td><td style="text-align:center"><a href="http://docs.kissyui.com" target="_blank" rel="noopener">KISSY - 阿里前端JavaScript库</a></td></tr><tr><td><a href="http://nej.netease.com" target="_blank" rel="noopener">网易Nej - Nice Easy Javascript</a></td><td style="text-align:center"><a href="http://demos.telerik.com/kendo-ui/mvvm/index" target="_blank" rel="noopener">Kendo UI MVVM Demo</a></td></tr><tr><td><a href="http://smartui.chinamzz.com" target="_blank" rel="noopener">Smart UI</a></td><td style="text-align:center"><a href="http://developer.yahoo.com/yui/grids" target="_blank" rel="noopener">雅虎UI - CSS UI</a></td></tr></tbody></table><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><table><thead><tr><th>Article</th><th style="text-align:center">Article</th></tr></thead><tbody><tr><td><a href="https://github.com/Wscats/Good-text-Share/issues/41" target="_blank" rel="noopener">CSS Flex布局</a></td><td style="text-align:center"><a href="https://github.com/Wscats/Good-text-Share/issues/38" target="_blank" rel="noopener">移动前端开发CSS3</a></td></tr><tr><td><a href="https://github.com/Wscats/Good-text-Share/issues/43" target="_blank" rel="noopener">响应式布局 媒体查询</a></td><td style="text-align:center"><a href="https://github.com/Wscats/Good-text-Share/issues/34" target="_blank" rel="noopener">CSS图片响应式布局</a></td></tr><tr><td><a href="https://wscats.github.io/angular-demo/stylesheets/styles.less" target="_blank" rel="noopener">lessDemo的less文件</a></td><td style="text-align:center"></td></tr><tr><td><strong>Reference</strong></td><td style="text-align:center"><strong>Reference</strong></td></tr><tr><td><a href="http://tympanus.net/codrops/css_reference" target="_blank" rel="noopener">CSS 语法参考</a></td><td style="text-align:center"><a href="http://isux.tencent.com/css3/index.html" target="_blank" rel="noopener">CSS3动画手册</a></td></tr><tr><td><a href="http://isux.tencent.com/css3/tools.html" target="_blank" rel="noopener">腾讯css3动画制作工具</a></td><td style="text-align:center"><a href="http://daneden.github.io/animate.css" target="_blank" rel="noopener">animate.css</a></td></tr><tr><td><a href="http://tympanus.net/Development/AnimatedBooks/" target="_blank" rel="noopener">Animated Books with CSS 3D Transforms</a></td><td style="text-align:center"><a href="http://browserhacks.com/" target="_blank" rel="noopener">Browserhacks</a></td></tr></tbody></table><h2 id="React"><a href="#React" class="headerlink" title="React"></a>React</h2><table><thead><tr><th>React</th><th style="text-align:center">Reference</th></tr></thead><tbody><tr><td><a href="http://www.runoob.com/react/react-tutorial.html" target="_blank" rel="noopener">React教程 菜鸟教程</a></td><td style="text-align:center"><a href="http://www.ruanyifeng.com/blog/2016/05/react_router.html?utm_source=tool.lu" target="_blank" rel="noopener">React Router 使用教程</a></td></tr><tr><td><a href="http://wiki.jikexueyuan.com/project/react/" target="_blank" rel="noopener">React开发中文手册-极客学院</a></td><td style="text-align:center"><a href="http://www.hubwiz.com/course/552762019964049d1872fc88/" target="_blank" rel="noopener">React教程-汇智网</a></td></tr><tr><td><a href="http://www.phperz.com/article/15/0712/140537.html#" target="_blank" rel="noopener">React.js快速开始</a></td><td style="text-align:center"><a href="http://www.alloyteam.com/2016/01/reactjs-best-practices-for-2016/" target="_blank" rel="noopener">Reactjs 2016最佳实践</a></td></tr><tr><td><a href="https://hulufei.gitbooks.io/react-tutorial/content/introduction.html" target="_blank" rel="noopener">React 入门教程</a></td><td style="text-align:center"><a href="http://www.hubwiz.com/course/552762019964049d1872fc88/?ch=alloyteam" target="_blank" rel="noopener">汇智网 React教程</a></td></tr><tr><td><a href="https://segmentfault.com/a/1190000002767365" target="_blank" rel="noopener">轻松入门React和Webpack</a></td><td style="text-align:center"><a href="http://nav.react-china.org/#docs" target="_blank" rel="noopener">React中文索引</a></td></tr><tr><td><a href="http://cn.redux.js.org/" target="_blank" rel="noopener">Redux 中文文档</a></td><td style="text-align:center"><a href="https://github.com/react-guide/react-router-cn" target="_blank" rel="noopener">React Router官方文档中文翻译</a></td></tr><tr><td><a href="http://www.cnblogs.com/kunyashaw/p/5619256.html" target="_blank" rel="noopener">React入门教程</a></td><td style="text-align:center"><a href="http://www.ibm.com/developerworks/cn/web/1509_dongyue_react/index.html" target="_blank" rel="noopener">React介绍及实践教程</a></td></tr><tr><td><a href="https://facebook.github.io/react/index.html" target="_blank" rel="noopener">React.js 官方网址</a></td><td style="text-align:center"><a href="https://facebook.github.io/react/docs/getting-started.html" target="_blank" rel="noopener">React.js 官方文档</a></td></tr><tr><td><a href="http://material-ui.com/#" target="_blank" rel="noopener">React.js material UI</a></td><td style="text-align:center"><a href="http://touchstonejs.io" target="_blank" rel="noopener">React.js TouchstoneJS UI</a></td></tr><tr><td><a href="http://amazeui.org/react" target="_blank" rel="noopener">React.js amazeui UI</a></td><td style="text-align:center"><a href="http://www.ruanyifeng.com/blog/2015/03/react.html" target="_blank" rel="noopener">React 入门实例教程 - 阮一峰</a></td></tr><tr><td><a href="http://wiki.jikexueyuan.com/project/react-native" target="_blank" rel="noopener">React Native 中文版</a></td><td style="text-align:center"><a href="https://fakefish.github.io/react-webpack-cookbook" target="_blank" rel="noopener">Webpack 和 React 小书 - gitbook</a></td></tr></tbody></table><h2 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h2><table><thead><tr><th>Vue</th><th style="text-align:center">AppDemo</th><th style="text-align:center">Demo</th></tr></thead><tbody><tr><td><a href="https://wscats.github.io/vue-demo/news/index.html" target="_blank" rel="noopener">NewsDemo</a></td><td style="text-align:center"><a href="https://wscats.github.io/vue-demo/vue计算属性.html" target="_blank" rel="noopener">vue计算属性</a></td><td style="text-align:center"><a href="https://wscats.github.io/vue-demo/vue生命周期.html" target="_blank" rel="noopener">vue生命周期</a></td></tr><tr><td><strong>Article</strong></td><td style="text-align:center"><strong>Vue文档</strong></td><td style="text-align:center"></td></tr><tr><td><a href="https://github.com/Wscats/vue-demo/issues/2" target="_blank" rel="noopener">Vue-cli脚手架</a></td><td style="text-align:center"><a href="https://github.com/Wscats/vue-demo/issues/3" target="_blank" rel="noopener">Vue组件</a></td><td style="text-align:center"><a href="https://github.com/Wscats/vue-demo/issues/8" target="_blank" rel="noopener">vue自定义指令</a></td></tr><tr><td><a href="https://github.com/Wscats/vue-demo/issues/9" target="_blank" rel="noopener">Vue过渡动画</a></td><td style="text-align:center"><a href="https://github.com/Wscats/vue-demo/issues/7" target="_blank" rel="noopener">Vue指令</a></td><td style="text-align:center"><a href="https://github.com/Wscats/vue-demo/issues/6" target="_blank" rel="noopener">Vue api文档</a></td></tr><tr><td><a href="https://github.com/Wscats/vue-demo/issues/5" target="_blank" rel="noopener">Vue执行ajax请求</a></td><td style="text-align:center"><a href="https://github.com/Wscats/vue-demo/issues/4" target="_blank" rel="noopener">vue实现类似angular服务的方法</a></td><td style="text-align:center"><a href="https://github.com/Wscats/vue-demo/issues/10" target="_blank" rel="noopener">Vue源码参考文档</a></td></tr><tr><td><strong>Router</strong></td><td style="text-align:center"><strong>路由</strong></td><td style="text-align:center"></td></tr><tr><td><a href="https://wscats.github.io/vue-demo/路由.html" target="_blank" rel="noopener">路由demo</a></td><td style="text-align:center"><a href="https://wscats.github.io/vue-demo/路由2.html" target="_blank" rel="noopener">路由demo2</a></td><td style="text-align:center"></td></tr><tr><td><strong>Directive</strong></td><td style="text-align:center"><strong>指令</strong></td><td style="text-align:center"></td></tr><tr><td><a href="https://wscats.github.io/vue-demo/指令.html" target="_blank" rel="noopener">指令demo</a></td><td style="text-align:center"><a href="https://wscats.github.io/vue-demo/自定义指令.html" target="_blank" rel="noopener">自定义指令demo</a></td><td style="text-align:center"><a href="https://wscats.github.io/vue-demo/滑动手势指令.html" target="_blank" rel="noopener">滑动手势demo</a></td></tr><tr><td><strong>Filter</strong></td><td style="text-align:center"><strong>过滤器</strong></td><td style="text-align:center"></td></tr><tr><td><a href="https://wscats.github.io/vue-demo/过滤器.html" target="_blank" rel="noopener">过滤器demo</a></td><td style="text-align:center"><a href="https://wscats.github.io/vue-demo/vue使用过滤器实现分页.html" target="_blank" rel="noopener">过滤器实现分页demo</a></td><td style="text-align:center"><a href="https://wscats.github.io/vue-demo/vue过滤器读写数据.html" target="_blank" rel="noopener">过滤器读写数据</a></td></tr><tr><td><strong>Transition</strong></td><td style="text-align:center"><strong>过渡</strong></td><td style="text-align:center"></td></tr><tr><td><a href="https://wscats.github.io/vue-demo/过渡.html" target="_blank" rel="noopener">过渡demo</a></td><td style="text-align:center"><a href="https://wscats.github.io/vue-demo/过渡2.html" target="_blank" rel="noopener">过渡demo2</a></td><td style="text-align:center"></td></tr><tr><td><strong>Form</strong></td><td style="text-align:center"><strong>表单</strong></td><td style="text-align:center"></td></tr><tr><td><a href="https://wscats.github.io/vue-demo/vue获取表单值.html" target="_blank" rel="noopener">获取表单值</a></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td><strong>Computed</strong></td><td style="text-align:center"><strong>计算</strong></td><td style="text-align:center"></td></tr><tr><td><a href="https://wscats.github.io/vue-demo/vue计算属性.html" target="_blank" rel="noopener">计算属性</a></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td>Component</td><td style="text-align:center">组件</td><td style="text-align:center"></td></tr><tr><td><a href="https://wscats.github.io/vue-demo/组件.html" target="_blank" rel="noopener">组件demo</a></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td><strong>Reference</strong></td><td style="text-align:center"><strong>Reference</strong></td><td style="text-align:center"><strong>Reference</strong></td></tr><tr><td><a href="http://cn.vuejs.org" target="_blank" rel="noopener">Vue官网</a></td><td style="text-align:center"><a href="http://forum.vuejs.org" target="_blank" rel="noopener">Vue论坛</a></td><td style="text-align:center"><a href="https://github.com/vuejs/awesome-vue" target="_blank" rel="noopener">Awesome-vue</a></td></tr></tbody></table><h2 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h2><table><thead><tr><th>Node</th><th style="text-align:center">Article</th></tr></thead><tbody><tr><td><a href="https://github.com/Wscats/Good-text-Share/issues/44" target="_blank" rel="noopener">node技巧</a></td><td style="text-align:center"><a href="https://github.com/Wscats/angular-demo/tree/gh-pages/diyNodeServer" target="_blank" rel="noopener">NodeJs静态服务器</a></td></tr><tr><td><strong>Reference</strong></td><td style="text-align:center"><strong>Reference</strong></td></tr><tr><td><a href="https://github.com/alsotang/node-lessons" target="_blank" rel="noopener">Node.js 包教不包会</a></td><td style="text-align:center"><a href="http://nqdeng.github.io/7-days-nodejs/" target="_blank" rel="noopener">七天学会NodeJS</a></td></tr><tr><td><a href="http://blog.fens.me/series-nodejs" target="_blank" rel="noopener">从零开始nodejs系列文章</a></td><td style="text-align:center"><a href="http://www.nodebeginner.org/index-zh-cn.html" target="_blank" rel="noopener">Node入门</a></td></tr><tr><td><a href="http://ourjs.com/detail/529ca5950cb6498814000005" target="_blank" rel="noopener">Node初学者入门，一本全面的NodeJS教程</a></td></tr></tbody></table><h2 id="Gulp"><a href="#Gulp" class="headerlink" title="Gulp"></a>Gulp</h2><table><thead><tr><th>Gulp</th><th style="text-align:center">Article</th></tr></thead><tbody><tr><td><a href="https://github.com/Wscats/glup" target="_blank" rel="noopener">Gulp Demo</a></td><td style="text-align:center"></td></tr><tr><td><strong>Gulp</strong></td><td style="text-align:center"><strong>Reference</strong></td></tr><tr><td><a href="http://gulpjs.com" target="_blank" rel="noopener">Gulp官网</a></td><td style="text-align:center"><a href="http://www.gulpjs.com.cn" target="_blank" rel="noopener">Gulp中文网</a></td></tr><tr><td><a href="https://github.com/Platform-CUF/use-gulp" target="_blank" rel="noopener">Gulp资料收集</a></td><td style="text-align:center"><a href="http://javascript.ruanyifeng.com/tool/gulp.html" target="_blank" rel="noopener">Gulp：任务自动管理工具 - ruanyifeng</a></td></tr><tr><td><a href="http://gulpjs.com/plugins]" target="_blank" rel="noopener">Gulp插件</a></td><td style="text-align:center"><a href="http://www.ido321.com/1622.html" target="_blank" rel="noopener">Gulp不完全入门教程</a></td></tr><tr><td><a href="https://github.com/nimojs/gulp-book" target="_blank" rel="noopener">Gulp 入门指南</a></td></tr></tbody></table><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><table><thead><tr><th>Other</th><th style="text-align:center">Article</th></tr></thead><tbody><tr><td><a href="https://github.com/Wscats/node-demo/issues/4" target="_blank" rel="noopener">关于Pornographic website的一些前端分析</a></td><td style="text-align:center"><a href="https://github.com/Wscats/Good-text-Share/issues/50" target="_blank" rel="noopener">微信公众号开发</a></td></tr><tr><td><a href="https://github.com/Wscats/Good-text-Share/issues/30" target="_blank" rel="noopener">Atom技巧总结</a></td><td style="text-align:center"><a href="https://github.com/Wscats/Good-text-Share/issues/46" target="_blank" rel="noopener">Mac小技巧</a></td></tr><tr><td><a href="https://github.com/Wscats/Good-text-Share/issues/9" target="_blank" rel="noopener">CSDN页面内JS跳转脚本</a></td><td style="text-align:center"><a href="https://github.com/Wscats/Good-text-Share/issues/8" target="_blank" rel="noopener">CSDN博客隐藏配置</a></td></tr><tr><td><a href="https://github.com/Wscats/Good-text-Share/issues/7" target="_blank" rel="noopener">百度设置小度机器人出现</a></td><td style="text-align:center"><a href="https://github.com/Wscats/Good-text-Share/issues/2" target="_blank" rel="noopener">前端冷知识，妙用浏览器地址栏</a></td></tr><tr><td><a href="https://github.com/Wscats/Good-text-Share/issues/27" target="_blank" rel="noopener">Vim笔记</a></td><td style="text-align:center"><a href="https://github.com/Wscats/Good-text-Share/issues/48" target="_blank" rel="noopener">Cordova配置&amp;&amp;Ionic配置（WebApp混合开发环境）</a></td></tr><tr><td><a href="https://github.com/Wscats/Good-text-Share/issues/33" target="_blank" rel="noopener">IE8及以下按钮超链接无法跳转的问题</a></td></tr></tbody></table><h2 id="分享功能"><a href="#分享功能" class="headerlink" title="分享功能"></a>分享功能</h2><table><thead><tr><th>Share</th><th style="text-align:center">Reference</th></tr></thead><tbody><tr><td><a href="http://share.baidu.com" target="_blank" rel="noopener">百度分享(PC)</a></td><td style="text-align:center"><a href="http://jiathis.com" target="_blank" rel="noopener">JiaThis(PC)</a></td></tr><tr><td><a href="http://developer.baidu.com/soc/share" target="_blank" rel="noopener">社会化分享组件(Mobile)</a></td><td style="text-align:center"><a href="http://www.mob.com" target="_blank" rel="noopener">ShareSDK轻松实现社会化功能(Mobile)</a></td></tr><tr><td><a href="http://dev.umeng.com/social/android/quick-integration" target="_blank" rel="noopener">友盟分享(Mobile)</a></td></tr></tbody></table><h2 id="在线演示"><a href="#在线演示" class="headerlink" title="在线演示"></a>在线演示</h2><table><thead><tr><th>Reference</th><th style="text-align:center">Reference</th></tr></thead><tbody><tr><td><a href="http://runjs.cn" target="_blank" rel="noopener">js 在线编辑 - runjs</a></td><td style="text-align:center"><a href="http://jsbin.com" target="_blank" rel="noopener">js 在线编辑 - jsbin</a></td></tr><tr><td><a href="http://codepen.io" target="_blank" rel="noopener">js 在线编辑 - codepen</a></td><td style="text-align:center"><a href="http://jsfiddle.net" target="_blank" rel="noopener">js 在线编辑 - jsfiddle</a></td></tr><tr><td><a href="http://ideone.com" target="_blank" rel="noopener">java 在线编辑 - runjs</a></td><td style="text-align:center"><a href="http://code.hcharts.cn" target="_blank" rel="noopener">js 在线编辑 - hcharts</a></td></tr><tr><td><a href="http://jsdm.com" target="_blank" rel="noopener">js 在线编辑 - jsdm</a></td><td style="text-align:center"><a href="http://sqlfiddle.com" target="_blank" rel="noopener">sql 在线编辑 - sqlfiddle</a></td></tr><tr><td><a href="https://thimble.mozilla.org" target="_blank" rel="noopener">mozilla 在线编辑器</a></td></tr></tbody></table><h2 id="富文本编辑器"><a href="#富文本编辑器" class="headerlink" title="富文本编辑器"></a>富文本编辑器</h2><table><thead><tr><th>Reference</th><th style="text-align:center">Reference</th></tr></thead><tbody><tr><td><a href="http://ueditor.baidu.com/website" target="_blank" rel="noopener">百度ueditor</a></td><td style="text-align:center"><a href="http://ckeditor.com" target="_blank" rel="noopener">ckeditor</a></td></tr><tr><td><a href="https://www.tinymce.com" target="_blank" rel="noopener">tinymce</a></td><td style="text-align:center"><a href="http://kindeditor.net" target="_blank" rel="noopener">kindeditor</a></td></tr><tr><td><a href="http://www.bootcss.com/p/bootstrap-wysiwyg" target="_blank" rel="noopener">wysiwyg</a></td><td style="text-align:center"><a href="http://integ.github.io/BachEditor" target="_blank" rel="noopener">BachEditor</a></td></tr><tr><td><a href="https://github.com/mycolorway/simditor" target="_blank" rel="noopener">simditor</a></td><td style="text-align:center"><a href="https://github.com/summernote/summernote" target="_blank" rel="noopener">summernote</a></td></tr><tr><td><a href="http://neilj.github.io/Squire" target="_blank" rel="noopener">Squire</a></td><td style="text-align:center"><a href="https://github.com/wangfupeng1988/wangEditor" target="_blank" rel="noopener">wangEditor</a></td></tr></tbody></table><h2 id="Chrome"><a href="#Chrome" class="headerlink" title="Chrome"></a>Chrome</h2><table><thead><tr><th>Reference</th><th style="text-align:center">Reference</th></tr></thead><tbody><tr><td><a href="http://www.cnblogs.com/constantince/p/4565261.html" target="_blank" rel="noopener">Chrome - 基础</a></td><td style="text-align:center"><a href="http://www.cnblogs.com/constantince/p/4579121.html" target="_blank" rel="noopener">Chrome - 进阶</a></td></tr><tr><td><a href="http://www.cnblogs.com/constantince/p/4585983.html" target="_blank" rel="noopener">Chrome - 性能</a></td><td style="text-align:center"><a href="http://www.cnblogs.com/constantince/p/4607497.html" target="_blank" rel="noopener">Chrome - 性能进阶</a></td></tr><tr><td><a href="http://www.cnblogs.com/constantince/p/4624241.html" target="_blank" rel="noopener">Chrome - 移动</a></td><td style="text-align:center"><a href="http://www.cnblogs.com/liyunhua/p/4544738.html" target="_blank" rel="noopener">Chrome - 使用技巧</a></td></tr><tr><td><a href="http://www.cnblogs.com/Wayou/p/chrome-console-tips-and-tricks.html" target="_blank" rel="noopener">Chrome - Console控制台不完全指南</a></td><td style="text-align:center"><a href="http://anti-code.com/devtools-cheatsheet" target="_blank" rel="noopener">chrome开发工具快捷键</a></td></tr><tr><td><a href="http://www.iinterest.net/2014/05/09/chrome-dev-tool-workspace" target="_blank" rel="noopener">Chrome 开发工具 Workspace 使用</a></td><td style="text-align:center"><a href="http://www.cppblog.com/deercoder/archive/2011/10/22/158886.html" target="_blank" rel="noopener">Chrome神器Vimium快捷键学习记录</a></td></tr><tr><td><a href="http://www.w3cplus.com/sassguide/debug.html" target="_blank" rel="noopener">Sass调试-w3cplus</a></td><td style="text-align:center"><a href="http://www.w3cplus.com/tools/how-to-use-chrome-devtools-like-a-pro.html" target="_blank" rel="noopener">如何更专业的使用Chrome开发者工具-w3cplus</a></td></tr><tr><td><a href="http://sentsin.com/web/253.html" target="_blank" rel="noopener">Chrome调试canvas</a></td><td style="text-align:center"><a href="https://segmentfault.com/a/1190000000683599" target="_blank" rel="noopener">神器——Chrome开发者工具(一)</a></td></tr><tr><td><a href="https://xinranliu.me/2015-05-22-qiqu-performance" target="_blank" rel="noopener">奇趣百科性能优化(Chrome DevTools 中的 Timeline Profils 等工具使用介绍</a></td><td style="text-align:center"><a href="http://frontenddev.org/link/15-tips-of-chrome-developer-tools.html" target="_blank" rel="noopener">Chrome 开发者工具的 15 个小技巧</a></td></tr><tr><td><a href="http://1ke.co/course/361" target="_blank" rel="noopener">Chrome开发者工具不完全指南</a></td><td style="text-align:center"><a href="http://segmentfault.com/a/1190000003882567" target="_blank" rel="noopener">Chrome 开发者工具使用技巧</a></td></tr></tbody></table><h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2><table><thead><tr><th>Reference</th><th style="text-align:center">Reference</th></tr></thead><tbody><tr><td><a href="http://www.infoq.com/cn/articles/javascript-high-performance-animation-and-page-rendering" target="_blank" rel="noopener">Javascript高性能动画与页面渲染</a></td><td style="text-align:center"><a href="http://isux.tencent.com/h5-performance.html" target="_blank" rel="noopener">移动H5前端性能优化指南</a></td></tr><tr><td><a href="http://www.uisdc.com/front-end-performance-for-web-designers-and-front-end-developers" target="_blank" rel="noopener">给网页设计师和前端开发者看的前端性能优化</a></td><td style="text-align:center"><a href="http://www.zhangxinxu.com/wordpress/tag/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD/" target="_blank" rel="noopener">张鑫旭——前端性能</a></td></tr><tr><td><a href="http://www.aliued.cn/2013/01/20/web%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E8%BF%9B%E9%98%B6%E8%B7%AF.html" target="_blank" rel="noopener">web前端性能优化进阶路</a></td><td style="text-align:center"><a href="http://www.feelcss.com/tag/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD" target="_blank" rel="noopener">Hey——前端性能</a></td></tr><tr><td><a href="http://www.cnblogs.com/yslow" target="_blank" rel="noopener">YSLOW中文介绍</a></td><td style="text-align:center"><a href="http://www.360doc.com/content/10/0928/09/2588264_56971287.shtml" target="_blank" rel="noopener">Yahoo!团队实践分享：网站性能</a></td></tr><tr><td><a href="http://tgideas.qq.com/webplat/info/news_version3/804/808/811/m579/201109/41355.shtml" target="_blank" rel="noopener">加载，不只是少一点点</a></td><td style="text-align:center"><a href="http://coolshell.cn/articles/6470.html" target="_blank" rel="noopener">由12306谈谈网站前端性能和后端性能优化</a></td></tr><tr><td><a href="http://www.alloyteam.com/2012/10/high-performance-html" target="_blank" rel="noopener">【高性能前端1】高性能HTML</a></td><td style="text-align:center"><a href="http://www.alloyteam.com/2012/10/high-performance-css" target="_blank" rel="noopener">【高性能前端2】高性能CSS</a></td></tr><tr><td><a href="http://www.infoq.com/cn/articles/front-end-engineering-and-performance-optimization-part1" target="_blank" rel="noopener">前端工程与性能优化（上）：静态资源版本更新与缓存</a></td><td style="text-align:center"><a href="http://www.infoq.com/cn/articles/front-end-engineering-and-performance-optimization-part2" target="_blank" rel="noopener">前端工程与性能优化（下）：静态资源管理与模板框架</a></td></tr><tr><td><a href="http://blog.jobbole.com/48369" target="_blank" rel="noopener">HTTPS连接的前几毫秒发生了什么</a></td><td style="text-align:center"><a href="http://uicss.cn/yslow/#more-12319" target="_blank" rel="noopener">Yslow</a></td></tr><tr><td><a href="https://github.com/amfe/article/issues/1" target="_blank" rel="noopener">阿里无线前端性能优化指南(Pt.1 加载期优化)</a></td><td style="text-align:center"><a href="http://www.cnblogs.com/developersupport/p/3248695.html" target="_blank" rel="noopener">毫秒必争，前端网页性能最佳实践</a></td></tr></tbody></table><h2 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h2><table><thead><tr><th>Reference</th><th style="text-align:center">Reference</th></tr></thead><tbody><tr><td><a href="http://www.bootcdn.cn/jquery" target="_blank" rel="noopener">Jquery&amp;Bootstrap中文网开源项目免费 CDN 服务</a></td><td style="text-align:center"><a href="http://www.bootcdn.cn" target="_blank" rel="noopener">Bootstrap中文网开源项目免费 CDN 服务</a></td></tr><tr><td><a href="http://lib.sinaapp.com" target="_blank" rel="noopener">新浪CDN</a></td><td style="text-align:center"><a href="http://cdn.code.baidu.com" target="_blank" rel="noopener">百度静态资源公共库</a></td></tr><tr><td><a href="http://staticfile.org" target="_blank" rel="noopener">开放静态文件 CDN - 七牛</a></td><td style="text-align:center"><a href="http://www.jq22.com/cdn" target="_blank" rel="noopener">CDN加速 - jq22</a></td></tr><tr><td><a href="http://www.asp.net/ajax/cdn" target="_blank" rel="noopener">微软CDN</a></td><td style="text-align:center"><a href="https://code.angularjs.org/1.5.8/" target="_blank" rel="noopener">Angular CDN</a></td></tr><tr><td><a href="http://libs.useso.com" target="_blank" rel="noopener">360网站卫士常用前端公共库CDN服务</a></td></tr></tbody></table><h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><table><thead><tr><th>Article</th><th style="text-align:center">Article</th></tr></thead><tbody><tr><td><a href="https://github.com/Wscats/Good-text-Share/issues/20" target="_blank" rel="noopener">Git操作</a></td><td style="text-align:center"><a href="http://blog.csdn.net/qq_27080247/article/details/49942991" target="_blank" rel="noopener">Git CSDN Blog</a></td></tr><tr><td><strong>Reference</strong></td><td style="text-align:center"><strong>Reference</strong></td></tr><tr><td><a href="http://git-scm.com" target="_blank" rel="noopener">Git-scm</a></td><td style="text-align:center"><a href="https://git-for-windows.github.io" target="_blank" rel="noopener">Git-for-windows</a></td></tr><tr><td><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">廖雪峰-Git教程</a></td><td style="text-align:center"><a href="http://www.worldhello.net/gotgithub/index.html" target="_blank" rel="noopener">Gogithub</a></td></tr><tr><td><a href="http://pcottle.github.io/learnGitBranching" target="_blank" rel="noopener">Git常规命令练习</a></td><td style="text-align:center"><a href="https://github.com/xirong/my-git" target="_blank" rel="noopener">Git的资料整理</a></td></tr><tr><td><a href="http://www.cnblogs.com/fanfan259/p/4810517.html" target="_blank" rel="noopener">我所记录的git命令（非常实用）</a></td><td style="text-align:center"><a href="https://github.com/phodal/github-roam" target="_blank" rel="noopener">GitHub 漫游指南</a></td></tr><tr><td><a href="https://github.com/tiimgreen/github-cheat-sheet/blob/master/README.zh-cn.md" target="_blank" rel="noopener">GitHub秘籍</a></td><td style="text-align:center"><a href="http://onlywei.github.io/explain-git-with-d3" target="_blank" rel="noopener">动画方式练习git</a></td></tr></tbody></table><h2 id="Sass-amp-Less"><a href="#Sass-amp-Less" class="headerlink" title="Sass&amp;Less"></a>Sass&amp;Less</h2><table><thead><tr><th>Article</th><th style="text-align:center">Article</th></tr></thead><tbody><tr><td><a href="https://github.com/Wscats/less-demo/issues/1" target="_blank" rel="noopener">Less教程</a></td><td style="text-align:center"></td></tr><tr><td><strong>Reference</strong></td><td style="text-align:center"><strong>Reference</strong></td></tr><tr><td><a href="http://www.w3cplus.com/sassguide" target="_blank" rel="noopener">Sass</a></td><td style="text-align:center"><a href="http://sass.bootcss.com" target="_blank" rel="noopener">Sass中文文档</a></td></tr><tr><td><a href="http://less.bootcss.com" target="_blank" rel="noopener">Less</a></td></tr></tbody></table><h2 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h2><table><thead><tr><th>Reference</th><th style="text-align:center">Reference</th></tr></thead><tbody><tr><td><a href="http://wowubuntu.com/markdown" target="_blank" rel="noopener">Markdown 语法说明 (简体中文版)</a></td><td style="text-align:center"><a href="https://github.com/LearnShare/Learning-Markdown/blob/master/README.md" target="_blank" rel="noopener">Markdown入门参考</a></td></tr><tr><td><a href="https://www.zybuluo.com/mdeditor" target="_blank" rel="noopener">Mdeditor(一款国内的在线markdown编辑器)</a></td><td style="text-align:center"><a href="https://stackedit.io" target="_blank" rel="noopener">Stackedit(国外的在线markdown编辑器，功能强大，同步云盘)</a></td></tr><tr><td><a href="http://bh-lay.github.io/mditor" target="_blank" rel="noopener">Mditor一款轻量级的markdown编辑器</a></td><td style="text-align:center"><a href="https://github.com/lepture/editor" target="_blank" rel="noopener">lepture-editor</a></td></tr><tr><td><a href="https://github.com/jbt/markdown-editor" target="_blank" rel="noopener">Markdown-editor</a></td></tr></tbody></table><h2 id="前端文档"><a href="#前端文档" class="headerlink" title="前端文档"></a>前端文档</h2><table><thead><tr><th>Reference</th><th style="text-align:center">Reference</th></tr></thead><tbody><tr><td><a href="https://github.com/JacksonTian/fks" target="_blank" rel="noopener">前端知识结构</a></td><td style="text-align:center"><a href="https://github.com/unruledboy/WebFrontEndStack" target="_blank" rel="noopener">Web前端开发大系概览</a></td></tr><tr><td><a href="https://github.com/justjavac/free-programming-books-zh_CN" target="_blank" rel="noopener">免费的编程中文书籍索</a></td><td style="text-align:center"><a href="https://github.com/dypsilon/frontend-dev-bookmarks" target="_blank" rel="noopener">前端书籍</a></td></tr><tr><td><a href="https://github.com/vhf/free-programming-books" target="_blank" rel="noopener">前端免费书籍大全</a></td><td style="text-align:center"><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/A_re-introduction_to_JavaScript" target="_blank" rel="noopener">重新介绍JavaScript（JS教程）</a></td></tr><tr><td><a href="https://www.gitbook.com 国外的在线markdown可编辑成书" target="_blank" rel="noopener">Gitbook</a></td><td style="text-align:center"><a href="https://github.com/Front-End-Developers-Hunan/Front-End-Develop-Guide" target="_blank" rel="noopener">Front-End-Develop-Guide 前端开发指南</a></td></tr><tr><td><a href="https://li-xinyang.gitbooks.io/frontend-notebook/content" target="_blank" rel="noopener">前端开发笔记本</a></td><td style="text-align:center"><a href="https://github.com/nieweidong/fetool" target="_blank" rel="noopener">大前端工具集</a></td></tr><tr><td><a href="https://dwqs.gitbooks.io/frontenddevhandbook/content" target="_blank" rel="noopener">前端开发者手册</a></td><td style="text-align:center"><a href="https://github.com/qiu-deqing/FE-learning" target="_blank" rel="noopener">结合个人经历总结的前端入门方法</a></td></tr><tr><td><a href="http://blog.csdn.net/qq_25827845/article/details/53079094" target="_blank" rel="noopener">2016最新前端学习计划</a></td></tr></tbody></table><h2 id="前端规范"><a href="#前端规范" class="headerlink" title="前端规范"></a>前端规范</h2><table><thead><tr><th>Reference</th><th style="text-align:center">Reference</th></tr></thead><tbody><tr><td><a href="http://alloyteam.github.io/CodeGuide/" target="_blank" rel="noopener">通过分析github代码库总结出来的工程师代码书写习惯</a></td><td style="text-align:center"><a href="http://codeguide.bootcss.com" target="_blank" rel="noopener">HTML&amp;CSS编码规范 by @mdo</a></td></tr><tr><td><a href="http://yuwenhui.github.io" target="_blank" rel="noopener">前端编码规范之js - by yuwenhui</a></td><td style="text-align:center"><a href="http://www.cnblogs.com/hustskyking/p/javascript-spec.html" target="_blank" rel="noopener">前端编码规范之js - by 李靖</a></td></tr><tr><td><a href="https://github.com/yuche/javascript#table-of-contents" target="_blank" rel="noopener">Airbnb JavaScript 编码规范（简体中文版）</a></td><td style="text-align:center"><a href="http://www.zhihu.com/question/20351507" target="_blank" rel="noopener">AMD与CMD规范的区别</a></td></tr><tr><td><a href="http://www.cnblogs.com/tugenhua0707/p/3507957.html" target="_blank" rel="noopener">AMD与CMD规范的区别</a></td><td style="text-align:center"><a href="http://docs.kissyui.com/1.4/docs/html/tutorials/style-guide/kissy-source-style.html" target="_blank" rel="noopener">KISSY 源码规范</a></td></tr><tr><td><a href="http://blog.jobbole.com/79075" target="_blank" rel="noopener">前端代码规范及最佳实践</a></td><td style="text-align:center"><a href="http://coderlmn.github.io/code-standards" target="_blank" rel="noopener">百度前端规范</a></td></tr><tr><td><a href="http://blog.jobbole.com/79484" target="_blank" rel="noopener">JavaScript风格指南/编码规范（Airbnb公司版）</a></td><td style="text-align:center"><a href="http://nec.netease.com/standard" target="_blank" rel="noopener">网易前端开发规范</a></td></tr><tr><td><a href="https://github.com/ecomfe/spec" target="_blank" rel="noopener">前端规范资源列表</a></td><td style="text-align:center"><a href="http://codecloud.net/5622.html" target="_blank" rel="noopener">Web 前端开发规范文档</a></td></tr></tbody></table><h2 id="前端面试"><a href="#前端面试" class="headerlink" title="前端面试"></a>前端面试</h2><table><thead><tr><th>Reference</th><th style="text-align:center">Reference</th></tr></thead><tbody><tr><td><a href="http://www.cnblogs.com/imwtr/p/4685546.html" target="_blank" rel="noopener">2016校招内推 – 阿里巴巴前端 – 四面面试经历</a></td><td style="text-align:center"><a href="https://www.nowcoder.com/discuss/3196" target="_blank" rel="noopener">那几个月在找工作（百度，网易游戏，华为）</a></td></tr><tr><td><a href="https://segmentfault.com/a/1190000000465431" target="_blank" rel="noopener">前端开发面试题</a></td><td style="text-align:center"><a href="https://github.com/hawx1993/Front-end-Interview-questions" target="_blank" rel="noopener">Front-end-Interview-questions</a></td></tr><tr><td><a href="http://ourjs.com/detail/5%E4%B8%AA%E7%BB%8F%E5%85%B8%E7%9A%84%E5%89%8D%E7%AB%AF%E" target="_blank" rel="noopener">5个经典的前端面试问题</a></td><td style="text-align:center"><a href="https://github.com/h5bp/Front-end-Developer-Interview-Questions/tree/master/Translations/Chinese" target="_blank" rel="noopener">Front-end-Developer-Interview-Questions</a></td></tr><tr><td><a href="http://blog.jobbole.com/78738/" target="_blank" rel="noopener">BAT及各大互联网公司2014前端笔试面试题：JavaScript篇</a></td><td style="text-align:center"><a href="https://github.com/paddingme/Front-end-Web-Development-Interview-Question" target="_blank" rel="noopener">前端开发面试题大收集</a></td></tr><tr><td><a href="https://github.com/qiu-deqing/FE-interview" target="_blank" rel="noopener">收集的前端面试题和答案</a></td><td style="text-align:center"><a href="https://github.com/markyun/My-blog/blob/master/Front-end-Developer-Questions/Questions-and-Answers/README.md" target="_blank" rel="noopener">前端开发面试题</a></td></tr><tr><td><a href="https://segmentfault.com/a/1190000005947094" target="_blank" rel="noopener">前端面试大全</a></td><td style="text-align:center"><a href="https://mdluo.github.io/blog/about-front-end-interview/" target="_blank" rel="noopener">关于前端面试</a></td></tr></tbody></table><h2 id="前端网站"><a href="#前端网站" class="headerlink" title="前端网站"></a>前端网站</h2><table><thead><tr><th>Reference</th><th style="text-align:center">Reference</th></tr></thead><tbody><tr><td><a href="https://gold.xitu.io/" target="_blank" rel="noopener">掘金</a></td><td style="text-align:center"><a href="http://fex.baidu.com/" target="_blank" rel="noopener">百度FEX</a></td></tr><tr><td><a href="http://www.aliued.com/" target="_blank" rel="noopener">阿里UED</a></td><td style="text-align:center"><a href="http://www.runoob.com/" target="_blank" rel="noopener">菜鸟教程</a></td></tr><tr><td><a href="http://www.qdfuns.com/portal.php" target="_blank" rel="noopener">QDFuns</a></td><td style="text-align:center"><a href="http://www.imooc.com/" target="_blank" rel="noopener">幕课网</a></td></tr><tr><td><a href="http://codepen.io/" target="_blank" rel="noopener">Codepen</a></td><td style="text-align:center"><a href="http://sentsin.com/daohang/" target="_blank" rel="noopener">Sentsin</a></td></tr><tr><td><a href="https://segmentfault.com/" target="_blank" rel="noopener">segmentfault</a></td><td style="text-align:center"><a href="http://www.qdfuns.com/" target="_blank" rel="noopener">前端网</a></td></tr></tbody></table><h2 id="JS练习"><a href="#JS练习" class="headerlink" title="JS练习"></a>JS练习</h2><table><thead><tr><th>Reference</th><th style="text-align:center">Reference</th></tr></thead><tbody><tr><td><a href="https://www.codewars.com/" target="_blank" rel="noopener">Codewars</a></td><td style="text-align:center"><a href="http://javascript-puzzlers.herokuapp.com/" target="_blank" rel="noopener">Javascript-puzzlers</a></td></tr><tr><td><a href="https://freecodecamp.cn/" target="_blank" rel="noopener">Freecodecamp中文版</a></td><td style="text-align:center"><a href="http://es6katas.org/" target="_blank" rel="noopener">ES6katas</a></td></tr><tr><td><a href="https://www.nowcoder.com/ta/js-assessment" target="_blank" rel="noopener">Now Coder牛客网</a></td><td style="text-align:center"><a href="https://leetcode.com/" target="_blank" rel="noopener">Leetcode</a></td></tr><tr><td><a href="https://nodeschool.io/" target="_blank" rel="noopener">Nodeschool</a></td><td style="text-align:center"><a href="https://www.hackerrank.com/" target="_blank" rel="noopener">Hackerrank</a></td></tr></tbody></table><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><table><thead><tr><th>Reference</th><th style="text-align:center">Reference</th></tr></thead><tbody><tr><td><a href="https://github.com/Ralph-Wang/algorithm.in.js" target="_blank" rel="noopener">数据结构与算法 JavaScript 描述. 章节练习</a></td><td style="text-align:center"><a href="https://github.com/twobin/twobinSort" target="_blank" rel="noopener">常见排序算法（JS版）</a></td></tr><tr><td><a href="https://github.com/luofei2011/jsAgm/blob/master/js/sort.js" target="_blank" rel="noopener">经典排序</a></td><td style="text-align:center"><a href="https://github.com/hechangmin/jssort" target="_blank" rel="noopener">常见排序算法-js版本</a></td></tr></tbody></table><h2 id="ES"><a href="#ES" class="headerlink" title="ES"></a>ES</h2><table><thead><tr><th>Reference</th><th style="text-align:center">Reference</th></tr></thead><tbody><tr><td><a href="http://es6-org.github.io/exploring-es6/" target="_blank" rel="noopener">Exploring-ES6翻译</a></td><td style="text-align:center"><a href="http://es6.ruanyifeng.com" target="_blank" rel="noopener">阮一峰 ES6</a></td></tr><tr><td><a href="http://yanhaijing.com/es5" target="_blank" rel="noopener">ECMA-262，第 5 版</a></td><td style="text-align:center"><a href="http://es5.github.io" target="_blank" rel="noopener">ES5</a></td></tr></tbody></table><p>如需参考过往资料可翻看commit或查看下文：</p><p><a href="https://www.zhihu.com/question/42256682" target="_blank" rel="noopener">如何评价 GitHub 中国区粉丝数前 100 名的用户？</a></p><p><a href="https://www.zhihu.com/question/42689999" target="_blank" rel="noopener">为什么有人GitHub排行很低，不仅不向排行高的学习，反而去黑排行高的？</a></p><p>来源<br><a href="https://github.com/windiest/Front-end-tutorial/blob/master/README.md" target="_blank" rel="noopener">https://github.com/windiest/Front-end-tutorial/blob/master/README.md</a></p><h3 id="过瘾吗-再来张"><a href="#过瘾吗-再来张" class="headerlink" title="过瘾吗 再来张"></a>过瘾吗 再来张</h3><p><img src="/posts/4b4371a7/1.jpg" alt="logo"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!--
![logo](frontEnd/2.jpg) --&gt;
&lt;h2 id=&quot;Javascript&quot;&gt;&lt;a href=&quot;#Javascript&quot; class=&quot;headerlink&quot; title=&quot;Javascript&quot;&gt;&lt;/a&gt;Javascript&lt;/h2&gt;&lt;table&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>性能优化</title>
    <link href="http://baiwenhao.github.io/posts/fc854d4d/"/>
    <id>http://baiwenhao.github.io/posts/fc854d4d/</id>
    <published>2017-06-13T14:04:34.000Z</published>
    <updated>2020-10-21T06:38:57.581Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://ntx.me/2015/05/21/IconFont/" target="_blank" rel="noopener">http://ntx.me/2015/05/21/IconFont/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;http://ntx.me/2015/05/21/IconFont/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://ntx.me/2015/05/21/IconFont/&lt;/a&gt;&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>mysql</title>
    <link href="http://baiwenhao.github.io/posts/9520183a/"/>
    <id>http://baiwenhao.github.io/posts/9520183a/</id>
    <published>2017-06-12T03:57:39.000Z</published>
    <updated>2020-10-21T06:38:57.577Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>今天准备用node链接mysql，查询公司项目的详细信息，第一步把项目列表展示出来即可！<br>于是简单学下mysql，分享给大家！</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>MySQL是由瑞典的MySQL AB公司开发，后来被甲骨文公司收购。和Oracle一样，MySQL是一个典型的关系型数据库<br>MySQL作为数据库主要是因为它体积小，速度快，安装完才几百兆，而且核心程序采用多线程编程，线程也是轻量级的进程，不会占用太多的系统资源，因此一般的中小型网站都选择MySQL数据库。<br>但是也正是由于它的轻量级，因此它也“砍掉”了一些功能，比如存储过程等</p><h2 id="关系型数据库和非关系型数据库"><a href="#关系型数据库和非关系型数据库" class="headerlink" title="关系型数据库和非关系型数据库"></a>关系型数据库和非关系型数据库</h2><p>说到关系型数据库，大家肯定就会想到另一个词与之对应，非关系型数据库，那么这两者有什么样的区别呢？<br>关系型数据库是指采用了关系模型（指的是二维表格模型）来组织数据的数据库，有稳定的表结构；<br>而非关系型数据库中的数据没有关系模型，以对象的形式存放到数据库中，对象之间的关系是通过每个对象的属性来决定的，有点类似于一长串json对象。<br>典型的非关系型数据库有MongoDB和Redis</p><h2 id="链接-mysql"><a href="#链接-mysql" class="headerlink" title="链接 mysql"></a>链接 mysql</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> mysql = <span class="built_in">require</span>(<span class="string">'mysql'</span>);</span><br><span class="line"><span class="comment">// 连接数据库的配置</span></span><br><span class="line"><span class="keyword">var</span> connection = mysql.createConnection(&#123;</span><br><span class="line">  <span class="comment">// 主机名称，一般是本机</span></span><br><span class="line">  host: <span class="string">'localhost'</span>,</span><br><span class="line">  <span class="comment">// 数据库的端口号，如果不设置，默认是3306</span></span><br><span class="line">  port: <span class="number">3306</span></span><br><span class="line">  <span class="comment">// 创建数据库时设置用户名</span></span><br><span class="line">  user: <span class="string">'xyf'</span>,</span><br><span class="line">  <span class="comment">// 创建数据库时设置的密码</span></span><br><span class="line">  password: <span class="string">'xyf'</span>,</span><br><span class="line">  <span class="comment">// 创建的数据库</span></span><br><span class="line">  database: <span class="string">'xyf_db'</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 与数据库建立连接</span></span><br><span class="line">connection.connect();</span><br><span class="line"><span class="comment">// 查询数据库</span></span><br><span class="line">connection.query(<span class="string">'SELECT 1 + 1 AS solution'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, rows, fields</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'The solution is: '</span>, rows[<span class="number">0</span>].solution);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 关闭连接</span></span><br><span class="line">connection.end();</span><br></pre></td></tr></table></figure><p>显示The solution is: 2 说明链接成功，如果不成功，请根据错误提示排错<br>在查询完数据库后，通过end()函数将连接关闭。<br>如果连接一直打开，首先会浪费不必要的系统资源<br>其次，数据库的连接数量有限制，如果达到上限时，会出现后续连接不上报错的情况</p><p>官方文档还给出了另外两种建立连接的方式（隐式链接）<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> mysql = <span class="built_in">require</span>(<span class="string">'mysql'</span>)</span><br><span class="line"><span class="keyword">var</span> connection = mysql.createConnection(...)</span><br><span class="line">connection.query(<span class="string">'SELECT 1 + 1 AS solution'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, rows, fields</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">throw</span> err</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'The solution is: '</span>, rows[<span class="number">0</span>].solution)</span><br><span class="line">&#125;)</span><br><span class="line">connection.end()</span><br></pre></td></tr></table></figure></p><p>注意这里没有用connect()函数建立连接，而是直接查询，这时建立连接将会被隐式地调用</p><h2 id="连接失败处理"><a href="#连接失败处理" class="headerlink" title="连接失败处理"></a>连接失败处理</h2><p>一旦连接出现错误将带来连锁的多米诺骨牌效应，查询也将会失败，整个程序也会崩溃，为了避免出现这样的情况，我们将查询和关闭连接放到回调函数中。<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> mysql = <span class="built_in">require</span>(<span class="string">'mysql'</span>)</span><br><span class="line"><span class="keyword">var</span> connection = mysql.createConnection(...)</span><br><span class="line">connection.connect(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(err)&#123;</span><br><span class="line">    <span class="comment">// 连接失败时的错误处理</span></span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  connection.query(<span class="string">'SELECT 1 + 1 AS solution'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, rows, fields</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">      <span class="comment">// 查询失败时的错误处理</span></span><br><span class="line">      <span class="built_in">console</span>.log(err)</span><br><span class="line">      <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'The solution is: '</span>, rows[<span class="number">0</span>].solution)</span><br><span class="line">  &#125;)</span><br><span class="line">  connection.end()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h2 id="关闭连接"><a href="#关闭连接" class="headerlink" title="关闭连接"></a>关闭连接</h2><p>打开了数据库的连接我们也需要关闭连接，有两种关闭连接的方式，一种就是我们上面用的end()方法来关闭连接，它可以接收一个回调函数<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">connection.end(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 这时连接已经被关闭了</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>destroy()函数确保了没有更多的时间和回调会触发连接。同时destroy()函数也没有回调函数<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">connection.destroy()</span><br></pre></td></tr></table></figure></p><h2 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h2><p>数据库连接池负责分配、管理和释放数据库连接，它允许应用程序重复使用一个现有的数据库连接，而不是再重新建立一个。<br>这项技术能明显提高对数据库操作的性能。<br>用一个很生动的例子来形容数据库连接池的工作：以前我们存取钱都需要去银行的柜台交易，银行的柜台数量是有限的，人多的时候还需要排队；<br>现在我们把钱都存在了支付宝上，每次需要用钱的时候都直接跟支付宝“要”，不需要再跑到银行去了，所有和银行“打交道”的业务都交给了支付宝帮我们来管理</p><p><img src="/posts/9520183a/01.jpg" alt="logo"><br>数据库连接池在初始化的时候将一定数量（数量受最小连接数制约）的数据库连接存放到数据库连接池中，<br>不管这些数据库连接是否被使用，连接池一直要存放这么多的连接数量。<br>连接池的最大数据库连接数量限制了连接池最多能同时拥有的连接数，如果超过最大连接数时，请求将会被添加到等待队列中去</p><h2 id="创建数据库连接池"><a href="#创建数据库连接池" class="headerlink" title="创建数据库连接池"></a>创建数据库连接池</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> mysql = <span class="built_in">require</span>(<span class="string">'mysql'</span>)</span><br><span class="line"><span class="keyword">var</span> pool=mysql.createPool(&#123;</span><br><span class="line">  host: <span class="string">'localhost'</span>,</span><br><span class="line">  user: <span class="string">'xyf'</span>,</span><br><span class="line">  password: <span class="string">'xyf'</span>,</span><br><span class="line">  port: <span class="string">'3306'</span>,</span><br><span class="line">  database: <span class="string">'xyf_db'</span>,</span><br><span class="line">  <span class="comment">// 最大连接数，默认为10</span></span><br><span class="line">  connectionLimit: <span class="number">10</span></span><br><span class="line">&#125;)</span><br><span class="line">pool.getConnection(<span class="function"><span class="keyword">function</span>(<span class="params">err,connection</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(err)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  connection.query(<span class="string">'SELECT 1 + 1 AS solution'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,result</span>)</span>&#123;</span><br><span class="line">    connection.release()</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(err)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'The solution is: '</span>, result[<span class="number">0</span>].solution)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>首先我们通过createPool()方法创建了一个数据库连接池，它的配置参数和上面的配置基本差不多，只是多了一个最大连接数。<br>每次我们需要和数据库建立连接的时候不再是直接建立连接，而是去连接池中通过pool.getConnection()方法“捞取”已有的连接。<br>这个方法有一个回调，数据库连接作为回调参数返回给我们使用。<br>每次查询完数据库是都要使用release()方法释放数据库连接，这样数据库连接又回到了连接池中。<br>释放后如果再使用connection将会报错</p><h2 id="关闭连接池"><a href="#关闭连接池" class="headerlink" title="关闭连接池"></a>关闭连接池</h2><p>一般数据库连接池不需要关闭，但是如果使用完连接池需要将所有的连接关闭，我们可以使用pool.end()方法将其关闭<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">pool.end(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 所有连接池中的数据库连接将会被关闭</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>end()方法提供一个回调方法，以便在所有连接关闭时进行一些操作。<br>关闭连接池前所有队列中的查询任然会执行完成，所以每次关闭的时间都不一样。<br>一旦end()方法被调用了，getConnection和其他一些获取连接池中连接的方法不会再被执行</p><h2 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h2><p>SELECT * FROM iw_static_project WHERE name LIKE “%app%”</p><h2 id="获取时间加日期"><a href="#获取时间加日期" class="headerlink" title="获取时间加日期"></a>获取时间加日期</h2><p>select now()<br>select current_timestamp()<br>select localtime()<br>select localtimestamp()</p><p>// now() 在执行开始时值就得到了， sysdate() 在函数执行时动态得到值<br>select sysdate()</p><p>// 获取日期<br>select curdate()</p><p>// 获得当前时间<br>select curtime()</p><p>// 因为我国位于东八时区，所以本地时间 = UTC 时间 + 8 小时。UTC 时间在业务涉及多个国家和地区的时候，非常有用。<br>utc_date(), utc_time(), utc_timestamp()</p><p>// 时间戳 Timestamp 函数<br>current_timestamp, current_timestamp()</p><p>// Unix 转换函数<br>unix_timestamp() // 将具体时间来转换成timestamp<br>unix_timestamp(1218290027)<br>from_unixtime(‘2008-08-08 12:30:00’) // 将timestamp来转换成具体时间<br>from_unixtime(1218169800, ‘%Y %D %M %h:%i:%s %x’)</p><p>// 时间戳（timestamp）转换、增、减函数<br>timestamp(date)                                     – date to timestamp<br>timestamp(dt,time)                                  – dt + time<br>timestampadd(unit,interval,datetime_expr)           –<br>timestampdiff(unit,datetime_expr1,datetime_expr2)   –<br>请看示例部分：<br>select timestamp(‘2008-08-08’);                         – 2008-08-08 00:00:00<br>select timestamp(‘2008-08-08 08:00:00’, ‘01:01:01’);    – 2008-08-08 09:01:01<br>select timestamp(‘2008-08-08 08:00:00’, ‘10 01:01:01’); – 2008-08-18 09:01:01<br>select timestampadd(day, 1, ‘2008-08-08 08:00:00’);     – 2008-08-09 08:00:00<br>select date_add(‘2008-08-08 08:00:00’, interval 1 day); – 2008-08-09 08:00:00<br>MySQL timestampadd() 函数类似于 date_add()。<br>select timestampdiff(year,’2002-05-01’,’2001-01-01’);                    – -1<br>select timestampdiff(day ,’2002-05-01’,’2001-01-01’);                    – -485<br>select timestampdiff(hour,’2008-08-08 12:00:00’,’2008-08-08 00:00:00’); – -12<br>select datediff(‘2008-08-08 12:00:00’, ‘2008-08-01 00:00:00’);           – 7<br>MySQL timestampdiff() 函数就比 datediff() 功能强多了，datediff() 只能计算两个日期（date）之间相差的天数。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;p&gt;今天准备用node链接mysql，查询公司项目的详细信息，第一步把项目列表展示出来即可！&lt;br&gt;于是简单学下mysql，分享给大家！&lt;/p&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>react</title>
    <link href="http://baiwenhao.github.io/posts/19656fd5/"/>
    <id>http://baiwenhao.github.io/posts/19656fd5/</id>
    <published>2017-05-19T03:53:11.000Z</published>
    <updated>2020-10-21T06:38:57.582Z</updated>
    
    <content type="html"><![CDATA[<h2 id="搭建项目"><a href="#搭建项目" class="headerlink" title="搭建项目"></a>搭建项目</h2><p><a href="https://blog.zfanw.com/webpack-tutorial/#%E5%88%9D%E5%A7%8B%E5%8C%96%E9%A1%B9%E7%9B%AE" target="_blank" rel="noopener">https://blog.zfanw.com/webpack-tutorial/#%E5%88%9D%E5%A7%8B%E5%8C%96%E9%A1%B9%E7%9B%AE</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;搭建项目&quot;&gt;&lt;a href=&quot;#搭建项目&quot; class=&quot;headerlink&quot; title=&quot;搭建项目&quot;&gt;&lt;/a&gt;搭建项目&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://blog.zfanw.com/webpack-tutorial/#%E5%88%9D%E5
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>this</title>
    <link href="http://baiwenhao.github.io/posts/feee8227/"/>
    <id>http://baiwenhao.github.io/posts/feee8227/</id>
    <published>2017-04-15T12:16:55.000Z</published>
    <updated>2020-10-21T06:38:57.589Z</updated>
    
    <content type="html"><![CDATA[<h6 id="this全面解析"><a href="#this全面解析" class="headerlink" title="this全面解析"></a>this全面解析</h6><p>this是一个关键字,被自动定义在所有函数的作用域中<br>每个函数的this是在调用时被绑定的，它指向什么取决于函数在哪里调用</p><h2 id="默认绑定"><a href="#默认绑定" class="headerlink" title="默认绑定"></a>默认绑定</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.a)</span><br><span class="line">&#125;</span><br><span class="line">foo()</span><br></pre></td></tr></table></figure><h2 id="隐式绑定"><a href="#隐式绑定" class="headerlink" title="隐式绑定"></a>隐式绑定</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.a)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  a: <span class="number">1</span>,</span><br><span class="line">  foo: foo</span><br><span class="line">&#125;</span><br><span class="line">obj.foo()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 隐式赋值</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="string">'2'</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.a)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dofn</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  fn()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  a: <span class="number">1</span>,</span><br><span class="line">  foo: foo</span><br><span class="line">&#125;</span><br><span class="line">dofn(obj.foo)</span><br></pre></td></tr></table></figure><h2 id="显式绑定"><a href="#显式绑定" class="headerlink" title="显式绑定"></a>显式绑定</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  a: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.a)</span><br><span class="line">&#125;</span><br><span class="line">foo.call(obj)</span><br></pre></td></tr></table></figure><h2 id="硬绑定"><a href="#硬绑定" class="headerlink" title="硬绑定"></a>硬绑定</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 显式的强制绑定</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">a</span>: <span class="number">2</span> &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span> (<span class="params">something</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.a + something</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> bar = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> arr = [].slice.call(<span class="built_in">arguments</span>)</span><br><span class="line">  <span class="keyword">return</span> foo.apply(obj, arr)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> b = bar(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">console</span>.log(b)</span><br><span class="line">setTimeout(bar, <span class="number">100</span>) <span class="comment">// 无法改变</span></span><br><span class="line">bar.call(<span class="built_in">window</span>)</span><br></pre></td></tr></table></figure><h2 id="new-对象过程"><a href="#new-对象过程" class="headerlink" title="new 对象过程"></a>new 对象过程</h2><p>1.创建或者构造一个全新对象<br>2.执行prototype链接<br>3.新对象会绑定到函数调用的this<br>4.如果函数没有返回其他对象，那么new表达式中的函数调用会自动返回这个新对象<br>new会劫持所有普通函数并用构造对象的形式来调用它</p><h2 id="this优先级"><a href="#this优先级" class="headerlink" title="this优先级"></a>this优先级</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 显式绑定优先于隐式绑定</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.a)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  a: <span class="number">1</span>,</span><br><span class="line">  foo: foo</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">  a: <span class="number">2</span>,</span><br><span class="line">  foo: foo</span><br><span class="line">&#125;</span><br><span class="line">obj.foo()</span><br><span class="line">obj2.foo()</span><br><span class="line">obj.foo.call(obj2)</span><br><span class="line">obj2.foo.call(obj)</span><br><span class="line"></span><br><span class="line"><span class="comment">// new绑定比隐式绑定优先级高</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="comment">// new 和他一毛钱关系都没有</span></span><br><span class="line">  foo:foo</span><br><span class="line">&#125;</span><br><span class="line">obj.foo(<span class="string">'wenhao'</span>)</span><br><span class="line"><span class="keyword">var</span> bar = <span class="keyword">new</span> obj.foo(<span class="string">'haoke'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(obj)</span><br><span class="line"><span class="built_in">console</span>.log(bar)</span><br><span class="line"></span><br><span class="line"><span class="comment">// new绑定比硬绑定优先级高</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line"><span class="keyword">var</span> fn = foo.bind(obj)</span><br><span class="line">fn(<span class="string">'wenhao'</span>)</span><br><span class="line"><span class="keyword">var</span> bar = <span class="keyword">new</span> fn(<span class="string">'haoke'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(bar)</span><br><span class="line"><span class="built_in">console</span>.log(obj)</span><br></pre></td></tr></table></figure><h2 id="判断this"><a href="#判断this" class="headerlink" title="判断this"></a>判断this</h2><p>1.是否在new中调用，是就绑定到新创建的对象上<br>2.是否通过call或者apply(显式绑定)或者硬绑定，this就绑定到指定的对象<br>3.是否在某个上下文中调用，(隐式绑定)，this就绑定在上下文对象<br>4.默认绑定可能是undefined或者全局对象</p><h2 id="软绑定"><a href="#软绑定" class="headerlink" title="软绑定"></a>软绑定</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'name:'</span> + <span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">name</span>: <span class="string">'obj'</span> &#125;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123; <span class="attr">name</span>: <span class="string">'obj2'</span> &#125;</span><br><span class="line"><span class="keyword">var</span> obj3 = &#123; <span class="attr">name</span>: <span class="string">'obj3'</span> &#125;</span><br><span class="line"><span class="keyword">var</span> fooBJ = foo.softBind( obj )</span><br><span class="line"></span><br><span class="line">fooBJ()</span><br><span class="line">obj2.foo = foo.softBind( obj )</span><br><span class="line">obj2.foo() <span class="comment">// obj2</span></span><br><span class="line"></span><br><span class="line">fooBJ.call(obj3) <span class="comment">// obj3</span></span><br><span class="line">setTimeout(obj2.foo, <span class="number">10</span>) <span class="comment">// obj</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现方法</span></span><br><span class="line"><span class="built_in">Function</span>.prototype.softBind = <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> fn = <span class="keyword">this</span></span><br><span class="line">  <span class="keyword">var</span> curried = [].slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>)</span><br><span class="line">  <span class="keyword">var</span> bound = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> fn.apply(</span><br><span class="line">      (!<span class="keyword">this</span> || <span class="keyword">this</span> === (<span class="built_in">window</span> || global)) ? obj : <span class="keyword">this</span>,</span><br><span class="line">      curried.concat.apply(curried, <span class="built_in">arguments</span>)</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">  bound.prototype = <span class="built_in">Object</span>.create(fn.prototype)</span><br><span class="line">  <span class="keyword">return</span> bound</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考： 你不知道的javascript上卷</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;this全面解析&quot;&gt;&lt;a href=&quot;#this全面解析&quot; class=&quot;headerlink&quot; title=&quot;this全面解析&quot;&gt;&lt;/a&gt;this全面解析&lt;/h6&gt;&lt;p&gt;this是一个关键字,被自动定义在所有函数的作用域中&lt;br&gt;每个函数的this是在调用时被绑
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>js</title>
    <link href="http://baiwenhao.github.io/posts/aaa991c7/"/>
    <id>http://baiwenhao.github.io/posts/aaa991c7/</id>
    <published>2017-04-11T13:22:05.000Z</published>
    <updated>2020-10-21T06:38:57.575Z</updated>
    
    <content type="html"><![CDATA[<h2 id="LSH-RHS"><a href="#LSH-RHS" class="headerlink" title="LSH RHS"></a>LSH RHS</h2><p>赋值操作的目标是谁LHS<br>谁是赋值操作的源头RHS</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 对a的引用是RHS引用,这里并没有对a赋值,而是查找取得a的值传递给log</span></span><br><span class="line"><span class="built_in">console</span>.log(a)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对a是LHS引用,实际并不关心当前值是什么,只是想要为=2这个赋值操作找个目标</span></span><br><span class="line">a=<span class="number">2</span></span><br></pre></td></tr></table></figure><p>对变量赋值,使用LHS查询<br>获取变量的值,使用RHS查询</p><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><p>作用域是根据名称超找变量的规则<br>嵌套作用域：当一个作用域嵌套在另一个作用域中，就发生了作用域的嵌套，在当前作用域无法找到某个变量，引擎就会在外层作用域继续查找，直到找到该变量或抵达全局作用域为止<br>函数作用域：属于这个函数的全部变量都可以在整个函数的范围内使用及复用<br>词法作用域：书写阶段或者定义时确定的,而动态作用域实在运行时确定的</p><h2 id="IIFE"><a href="#IIFE" class="headerlink" title="IIFE"></a>IIFE</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">IIFE</span>(<span class="params">global</span>) </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;)(<span class="built_in">window</span>)</span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;...&#125;())</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">2</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">IIFE</span>(<span class="params">def</span>) </span>&#123;</span><br><span class="line">  def(<span class="built_in">window</span>)</span><br><span class="line">&#125;)(<span class="function"><span class="keyword">function</span> (<span class="params">global</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">1</span></span><br><span class="line">  <span class="built_in">console</span>.log(a)</span><br><span class="line">  <span class="built_in">console</span>.log(global.a)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>当函数而已记住并访问所在作用域,函数在当前作用域外执行,就产生了闭包<br>try{throw 2;}catch(err){console.log(2)}</p><h2 id="属性描述符"><a href="#属性描述符" class="headerlink" title="属性描述符"></a>属性描述符</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">a</span>: <span class="number">2</span> &#125;</span><br><span class="line"><span class="keyword">var</span> conf = <span class="built_in">Object</span>.getOwnPropertyDescriptor( obj, <span class="string">'a'</span> ) <span class="comment">// 获取</span></span><br><span class="line">&#123;</span><br><span class="line">  value: <span class="number">2</span>,</span><br><span class="line">  writable: <span class="literal">true</span>,</span><br><span class="line">  enumerable: <span class="literal">true</span>,</span><br><span class="line">  configurable: <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> o = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(o, <span class="string">'age'</span>, &#123; <span class="comment">// 设置</span></span><br><span class="line">  value: <span class="number">24</span>,</span><br><span class="line">  writable: <span class="literal">false</span>, <span class="comment">// 是否可修改</span></span><br><span class="line">  enumerable: <span class="literal">false</span>, <span class="comment">// 是否可枚举 (可以出现在对象属性的遍历中)</span></span><br><span class="line">  configurable: <span class="literal">false</span> <span class="comment">// 是否可配置,false是单向操作无法撤销</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="禁止扩展"><a href="#禁止扩展" class="headerlink" title="禁止扩展"></a>禁止扩展</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myObj = &#123; <span class="attr">a</span>: <span class="number">2</span> &#125;</span><br><span class="line"><span class="built_in">Object</span>.preventExtensions(myObj)</span><br></pre></td></tr></table></figure><h2 id="密封-and-冻结"><a href="#密封-and-冻结" class="headerlink" title="密封 and 冻结"></a>密封 and 冻结</h2><p>Object.seal() // 会创建一个密封对象,在现有对象上调用 Object.preventExtensions()把现有属性标记为configurable: false<br>不能添加,删除可以修改<br>冻结是调用Object.freeze()，是在现有对象上调用Object.seal()</p><h2 id="Getter-和-Setter"><a href="#Getter-和-Setter" class="headerlink" title="Getter 和 Setter"></a>Getter 和 Setter</h2><p>访问描述符和数据描述符，对于描述符来说，js会忽略他们的value和writable特性<br>取而代之的是set和get，还有configurable和enumerable<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  get a () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._a</span><br><span class="line">  &#125;,</span><br><span class="line">  set a (v) &#123;</span><br><span class="line">    <span class="keyword">this</span>._a = v * <span class="number">2</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.a = <span class="number">2</span> <span class="comment">// 4</span></span><br></pre></td></tr></table></figure></p><h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">'b'</span>, &#123;</span><br><span class="line">  value: <span class="number">5</span>,</span><br><span class="line">  enumerable: <span class="literal">false</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log((<span class="string">'b'</span> <span class="keyword">in</span> obj)) <span class="comment">// true (in回去查找原型)</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(obj)) <span class="comment">// [](返回可枚举属性)</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.propertyIsEnumerable(<span class="string">'b'</span>)) <span class="comment">// false (返回所有属性)</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertyNames(obj)) <span class="comment">// ['b'](返回所有属性)</span></span><br></pre></td></tr></table></figure><h2 id="Object-对象"><a href="#Object-对象" class="headerlink" title="Object 对象"></a>Object 对象</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 寄生继承</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Vehicle</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.engines = <span class="string">'wenhao'</span></span><br><span class="line">&#125;</span><br><span class="line">Vehicle.prototype.ignition = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'my engine'</span>)</span><br><span class="line">&#125;</span><br><span class="line">Vehicle.prototype.drive = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.ignition()</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'setting'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Car</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> car = <span class="keyword">new</span> Vehicle()</span><br><span class="line">  car.wheels = <span class="number">4</span></span><br><span class="line">  <span class="keyword">var</span> vehDrive = car.drive</span><br><span class="line">  car.drive = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    vehDrive.call(<span class="keyword">this</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'rolling'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> car</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 检索现有对象的原型对象</span></span><br><span class="line"><span class="built_in">Object</span>.getPrototypeOf(目标对象的原型对象) === app.prototype;</span><br><span class="line">原型.isPrototypeOf(实例)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把E委托到D</span></span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf(E, D) <span class="comment">// 返回E对象 E的proto指向D</span></span><br></pre></td></tr></table></figure><h2 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 截取长度</span></span><br><span class="line"><span class="number">10.</span>.toFixed(<span class="number">2</span>)</span><br><span class="line"><span class="number">10</span> .toFixed(<span class="number">2</span>)</span><br><span class="line"><span class="number">10.</span>.toPrecision(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 浮点数比大小 polyfill</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">Number</span>.EPSILON) &#123;</span><br><span class="line">  <span class="built_in">Number</span>.EPSILON = <span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">-52</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">num</span> (<span class="params">n1, n2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.abs(n1, n2) &lt; <span class="built_in">Number</span>.EPSILON</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最大整数</span></span><br><span class="line"><span class="built_in">Number</span>.MAX_SAFE_INTEGER</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最小整数</span></span><br><span class="line"><span class="built_in">Number</span>.MIN_SAFE_INTEGER</span><br><span class="line"></span><br><span class="line"><span class="comment">// 整数判断</span></span><br><span class="line"><span class="built_in">Number</span>.isInteger(<span class="number">42.000</span>) <span class="comment">// true</span></span><br><span class="line">n % <span class="number">1</span> === <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断两个值是否绝对相等 (特殊的相对比较)</span></span><br><span class="line"><span class="built_in">Object</span>.is(<span class="number">0</span>, <span class="number">-0</span>)</span><br></pre></td></tr></table></figure><h3 id="Function-and-Object"><a href="#Function-and-Object" class="headerlink" title="Function and Object"></a>Function and Object</h3><p><a href="http://www.cnblogs.com/shuiyi/p/5343399.html" target="_blank" rel="noopener">http://www.cnblogs.com/shuiyi/p/5343399.html</a></p><h3 id="编码-解码"><a href="#编码-解码" class="headerlink" title="编码 解码"></a>编码 解码</h3><p><a href="http://www.cnblogs.com/shuiyi/p/5277233.html#3979662" target="_blank" rel="noopener">http://www.cnblogs.com/shuiyi/p/5277233.html#3979662</a></p><h2 id="computed"><a href="#computed" class="headerlink" title="computed"></a>computed</h2><p>// 这两者可以将浮点转成整型且效率方面要比同类的parseInt,Math.round 要快。在处理像素及动画位移等效果的时候会很有用<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = (<span class="number">12.4</span> / <span class="number">4.13</span>) | <span class="number">0</span>;<span class="comment">//结果为3</span></span><br><span class="line"><span class="keyword">var</span> bar = ~~(<span class="number">12.4</span> / <span class="number">4.13</span>); <span class="comment">//结果为3</span></span><br><span class="line"><span class="keyword">var</span> a=<span class="number">1</span>,b=<span class="number">2</span>;a=[b,b=a][<span class="number">0</span>];</span><br></pre></td></tr></table></figure></p><p>javascript 变量命名类型 变量命名前缀<br>array 数组  a<br>boolean 布尔值 b<br>float 浮点数 l<br>function 函数 fn<br>int 整型  i<br>object 对象 o<br>regular 正则  r<br>string 字符串  s</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;LSH-RHS&quot;&gt;&lt;a href=&quot;#LSH-RHS&quot; class=&quot;headerlink&quot; title=&quot;LSH RHS&quot;&gt;&lt;/a&gt;LSH RHS&lt;/h2&gt;&lt;p&gt;赋值操作的目标是谁LHS&lt;br&gt;谁是赋值操作的源头RHS&lt;/p&gt;
&lt;figure class=&quot;hi
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>webpack</title>
    <link href="http://baiwenhao.github.io/posts/b9f20a20/"/>
    <id>http://baiwenhao.github.io/posts/b9f20a20/</id>
    <published>2017-04-06T06:57:30.000Z</published>
    <updated>2020-10-21T06:38:57.591Z</updated>
    
    <content type="html"><![CDATA[<h2 id="proxy"><a href="#proxy" class="headerlink" title="proxy"></a>proxy</h2><p>const httpProxyMiddleware = require(‘http-proxy-middleware’)</p><p><a href="https://github.com/Klathmon/imagemin-webpack-plugin" target="_blank" rel="noopener">https://github.com/Klathmon/imagemin-webpack-plugin</a> // 压缩图片<br><a href="https://github.com/eyasliu/blog/issues/8" target="_blank" rel="noopener">https://github.com/eyasliu/blog/issues/8</a></p><p>笔记<br><a href="http://www.css88.com/doc/webpack/concepts/entry-points/" target="_blank" rel="noopener">http://www.css88.com/doc/webpack/concepts/entry-points/</a></p><h2 id="文件指纹"><a href="#文件指纹" class="headerlink" title="文件指纹"></a>文件指纹</h2><p>hash 和整个项目的构建相关，只要项目文件有修改，整个项目的构建的 hash 值就会更改</p><p>chunkhash 和wekpack 打包的 chunk 有关，不同的 entry 会生成不同的chunkhash 值（js）</p><p>contenthash 根据文件内容来定义 hash，文件内容不变，则 contenthash 不变（css）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;proxy&quot;&gt;&lt;a href=&quot;#proxy&quot; class=&quot;headerlink&quot; title=&quot;proxy&quot;&gt;&lt;/a&gt;proxy&lt;/h2&gt;&lt;p&gt;const httpProxyMiddleware = require(‘http-proxy-middleware
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>koa</title>
    <link href="http://baiwenhao.github.io/posts/6313db75/"/>
    <id>http://baiwenhao.github.io/posts/6313db75/</id>
    <published>2017-03-02T02:41:30.000Z</published>
    <updated>2020-10-21T06:38:57.575Z</updated>
    
    <content type="html"><![CDATA[<h5 id="koa-blog"><a href="#koa-blog" class="headerlink" title="koa_blog"></a>koa_blog</h5><p>正在搭建中…</p><h2 id="app-js"><a href="#app-js" class="headerlink" title="app.js"></a>app.js</h2><p>const cors = require(‘koa-cors’); // 跨域<br>const mount = require(‘koa-mount’)<br>const serve = require(‘koa-static’)</p><p>app.use(mount(‘/assets’, serve(path.join(<strong>dirname, ‘../assets’))))<br>app.use(mount(‘/dist’, serve(path.join(</strong>dirname, ‘../dist’))))</p><h5 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h5><p><a href="https://github.com/guo-yu/koa-guide" target="_blank" rel="noopener">https://github.com/guo-yu/koa-guide</a><br><a href="https://github.com/koajs/koa/wiki" target="_blank" rel="noopener">https://github.com/koajs/koa/wiki</a><br><a href="https://www.versioneye.com/nodejs/koa2-demo/0.1.0" target="_blank" rel="noopener">https://www.versioneye.com/nodejs/koa2-demo/0.1.0</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;koa-blog&quot;&gt;&lt;a href=&quot;#koa-blog&quot; class=&quot;headerlink&quot; title=&quot;koa_blog&quot;&gt;&lt;/a&gt;koa_blog&lt;/h5&gt;&lt;p&gt;正在搭建中…&lt;/p&gt;
&lt;h2 id=&quot;app-js&quot;&gt;&lt;a href=&quot;#app-js&quot; c
      
    
    </summary>
    
    
  </entry>
  
</feed>
